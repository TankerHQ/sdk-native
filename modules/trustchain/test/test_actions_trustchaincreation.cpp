#include <Tanker/Trustchain/Actions/TrustchainCreation.hpp>

#include <Tanker/Serialization/Serialization.hpp>

#include <Helpers/Buffers.hpp>

#include <catch2/catch_test_macros.hpp>

using namespace Tanker;
using namespace Tanker::Trustchain;
using namespace Tanker::Trustchain::Actions;

TEST_CASE("TrustchainCreation tests")
{
  Crypto::PublicSignatureKey const publicSignatureKey{};
  TrustchainCreation tc(publicSignatureKey);

  CHECK(tc.nature() == Nature::TrustchainCreation);
  CHECK(tc.publicSignatureKey() == publicSignatureKey);
}

TEST_CASE("TrustchainCreation serialization test vectors")
{
  SECTION("it should serialize/deserialize a TrustchainCreation")
  {
    // clang-format off
    std::vector<std::uint8_t> const serializedTrustchainCreation = {
      // varint version
      0x01,
      // varint index
      0x00,
      // trustchain id
      0xc0, 0x9e, 0xdd, 0x14, 0x8b, 0x51, 0x14, 0xdb,
      0x5b, 0xc9, 0x9f, 0x16, 0x80, 0x9c, 0xbf, 0xd8,
      0x27, 0x9f, 0x60, 0x80, 0xe2, 0x96, 0x30, 0x0a,
      0x0c, 0x50, 0x07, 0xf4, 0xa0, 0x07, 0x20, 0x17,
      // varint nature
      0x01,
      // varint payload size
      0x20,
      // public signature key
      0x66, 0x98, 0x23, 0xe7, 0xc5, 0x0e, 0x13, 0xe0, 0xed, 0x4a, 0x56, 0x91,
      0xc6, 0x63, 0xc7, 0xeb, 0x1b, 0xd6, 0x53, 0x12, 0xd4, 0x8d, 0x21, 0xd4,
      0x86, 0x76, 0x0f, 0x04, 0x85, 0x7d, 0xf0, 0xef,
      // author
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      // signature
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
    };
    // clang-format on
    TrustchainCreation const tc{Crypto::PublicSignatureKey(std::vector<uint8_t>{
        0x66, 0x98, 0x23, 0xe7, 0xc5, 0x0e, 0x13, 0xe0, 0xed, 0x4a, 0x56, 0x91, 0xc6, 0x63, 0xc7, 0xeb,
        0x1b, 0xd6, 0x53, 0x12, 0xd4, 0x8d, 0x21, 0xd4, 0x86, 0x76, 0x0f, 0x04, 0x85, 0x7d, 0xf0, 0xef})};

    CHECK(Serialization::serialize(tc) == serializedTrustchainCreation);
    CHECK(Serialization::deserialize<TrustchainCreation>(serializedTrustchainCreation) == tc);
  }
}
