#include <Tanker/Trustchain/Actions/KeyPublishToUser.hpp>

#include <Tanker/Serialization/Serialization.hpp>

#include <Helpers/Buffers.hpp>

#include <doctest.h>

using namespace Tanker;
using namespace Tanker::Trustchain;
using namespace Tanker::Trustchain::Actions;

TEST_CASE("KeyPublishToUser tests")
{
  Crypto::PublicEncryptionKey const publicEncryptionKey{};
  Crypto::Mac const mac{};
  Crypto::SealedSymmetricKey const key{};
  KeyPublishToUser kp(publicEncryptionKey, mac, key);

  CHECK(kp.nature() == Nature::KeyPublishToUser);
}

TEST_CASE("Serialization test vectors")
{
  SUBCASE("it should serialize/deserialize a KeyPublishToUser")
  {
    // clang-format off
    std::vector<std::uint8_t> const serializedKeyPublishToUser = {
      // recipient
      0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x75, 0x73,
      0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      // mac
      0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x6d, 0x61, 0x63,
      0x00, 0x00, 0x00, 0x00,
      // key
      0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x20, 0x6b, 0x65,
      0x79, 0x2e, 0x2e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    // clang-format on

    auto const recipientPublicEncryptionKey =
        make<Crypto::PublicEncryptionKey>("recipient user");
    auto const mac = make<Crypto::Mac>("resource mac");
    auto const key = make<Crypto::SealedSymmetricKey>("encrypted key...");
    KeyPublishToUser const kp(recipientPublicEncryptionKey, mac, key);

    CHECK(Serialization::serialize(kp) == serializedKeyPublishToUser);
    CHECK(Serialization::deserialize<KeyPublishToUser>(
              serializedKeyPublishToUser) == kp);
  }
}
