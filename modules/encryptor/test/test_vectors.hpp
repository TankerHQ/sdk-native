#pragma once

#include <Tanker/Encryptor/v10.hpp>
#include <Tanker/Encryptor/v11.hpp>
#include <Tanker/Encryptor/v2.hpp>
#include <Tanker/Encryptor/v3.hpp>
#include <Tanker/Encryptor/v4.hpp>
#include <Tanker/Encryptor/v5.hpp>
#include <Tanker/Encryptor/v6.hpp>
#include <Tanker/Encryptor/v7.hpp>
#include <Tanker/Encryptor/v8.hpp>
#include <Tanker/Encryptor/v9.hpp>

#include <catch2/catch.hpp>

namespace
{
using namespace Tanker;
using Crypto::CompositeResourceId;
using Crypto::ResourceId;
using Crypto::SimpleResourceId;
using Streams::TransparentSessionHeader;

template <typename Encryptor>
struct TestVector
{
  Crypto::SymmetricKey key;
  std::vector<uint8_t> clearData;
  std::vector<uint8_t> encryptedData;
  std::result_of_t<decltype (&Encryptor::extractResourceId)(
      gsl::span<std::uint8_t const>)>
      resourceId;

  TestVector(std::vector<uint8_t> const& key,
             std::vector<uint8_t> const& clearData,
             std::vector<uint8_t> const& encryptedData,
             std::vector<uint8_t> const& resourceId)
    : key(key),
      clearData(clearData),
      encryptedData(encryptedData),
      resourceId(resourceId)
  {
  }
};

template <typename T>
struct TestContext;

template <>
struct TestContext<EncryptorV2>
{
  tc::cotask<EncryptionMetadata> encrypt(
      gsl::span<std::uint8_t> encryptedData,
      gsl::span<std::uint8_t const> clearData) const
  {
    return EncryptorV2::encrypt(encryptedData, clearData);
  }

  auto encryptedSize(uint64_t clearSize) const
  {
    return EncryptorV2::encryptedSize(clearSize);
  }

  std::vector<TestVector<EncryptorV2>> testVectors{
      {{0x76, 0xd,  0x8e, 0x80, 0x5c, 0xbc, 0xa8, 0xb6, 0xda, 0xea, 0xcf,
        0x66, 0x46, 0xca, 0xd7, 0xeb, 0x4f, 0x3a, 0xbc, 0x69, 0xac, 0x9b,
        0xce, 0x77, 0x35, 0x8e, 0xa8, 0x31, 0xd7, 0x2f, 0x14, 0xdd},
       make_buffer("this is very secret"),
       {0x02, 0x32, 0x93, 0xa3, 0xf8, 0x6c, 0xa8, 0x82, 0x25, 0xbc, 0x17, 0x7e,
        0xb5, 0x65, 0x9b, 0xee, 0xd,  0xfd, 0xcf, 0xc6, 0x5c, 0x6d, 0xb4, 0x72,
        0xe0, 0x5b, 0x33, 0x27, 0x4c, 0x83, 0x84, 0xd1, 0xad, 0xda, 0x5f, 0x86,
        0x2,  0x46, 0x42, 0x91, 0x71, 0x30, 0x65, 0x2e, 0x72, 0x47, 0xe6, 0x48,
        0x20, 0xa1, 0x86, 0x91, 0x7f, 0x9c, 0xb5, 0x5e, 0x91, 0xb3, 0x65, 0x2d},
       {0x72,
        0x47,
        0xe6,
        0x48,
        0x20,
        0xa1,
        0x86,
        0x91,
        0x7f,
        0x9c,
        0xb5,
        0x5e,
        0x91,
        0xb3,
        0x65,
        0x2d}},
  };
};

template <>
struct TestContext<EncryptorV3>
{
  tc::cotask<EncryptionMetadata> encrypt(
      gsl::span<std::uint8_t> encryptedData,
      gsl::span<std::uint8_t const> clearData) const
  {
    return EncryptorV3::encrypt(encryptedData, clearData);
  }

  auto encryptedSize(uint64_t clearSize) const
  {
    return EncryptorV3::encryptedSize(clearSize);
  }

  std::vector<TestVector<EncryptorV3>> testVectors{
      {{0x76, 0xd,  0x8e, 0x80, 0x5c, 0xbc, 0xa8, 0xb6, 0xda, 0xea, 0xcf,
        0x66, 0x46, 0xca, 0xd7, 0xeb, 0x4f, 0x3a, 0xbc, 0x69, 0xac, 0x9b,
        0xce, 0x77, 0x35, 0x8e, 0xa8, 0x31, 0xd7, 0x2f, 0x14, 0xdd},
       make_buffer("this is very secret"),
       {0x03, 0x37, 0xb5, 0x3d, 0x55, 0x34, 0xb5, 0xc1, 0x3f, 0xe3, 0x72, 0x81,
        0x47, 0xf0, 0xca, 0xda, 0x29, 0x99, 0x6e, 0x4,  0xa8, 0x41, 0x81, 0xa0,
        0xe0, 0x5e, 0x8e, 0x3a, 0x8,  0xd3, 0x78, 0xfa, 0x5,  0x9f, 0x17, 0xfa},
       {0xa8,
        0x41,
        0x81,
        0xa0,
        0xe0,
        0x5e,
        0x8e,
        0x3a,
        0x8,
        0xd3,
        0x78,
        0xfa,
        0x5,
        0x9f,
        0x17,
        0xfa}},
  };
};

template <>
struct TestContext<EncryptorV4>
{
  tc::cotask<EncryptionMetadata> encrypt(
      gsl::span<std::uint8_t> encryptedData,
      gsl::span<std::uint8_t const> clearData) const
  {
    return EncryptorV4::encrypt(encryptedData, clearData);
  }

  auto encryptedSize(uint64_t clearSize) const
  {
    return EncryptorV4::encryptedSize(clearSize);
  }

  std::vector<TestVector<EncryptorV4>> testVectors{
      // Empty buffer
      {{0xda, 0xa5, 0x3d, 0x7,  0xc,  0x4b, 0x63, 0x54, 0xe3, 0x6f, 0x96,
        0xc1, 0x14, 0x4c, 0x23, 0xcc, 0x16, 0x23, 0x52, 0xa1, 0xc5, 0x53,
        0xe3, 0xea, 0xd9, 0xc4, 0x1d, 0x28, 0x4c, 0x45, 0x43, 0xa9},
       {},
       {0x4,  0x0,  0x0,  0x10, 0x0,  0x5e, 0x44, 0x54, 0xa7, 0x83, 0x21,
        0xd8, 0x77, 0x8c, 0x7a, 0x25, 0xc9, 0x46, 0x52, 0xa,  0x60, 0x1d,
        0xb1, 0x25, 0xaf, 0x1e, 0x85, 0x84, 0xa9, 0xcf, 0x19, 0x71, 0x26,
        0x79, 0xf3, 0x47, 0xd1, 0xf6, 0xf0, 0xf7, 0x2,  0x85, 0x47, 0xfb,
        0xe8, 0x5e, 0x16, 0x25, 0x33, 0xf6, 0x66, 0x7b, 0xb9, 0xd5, 0xa5,
        0x1d, 0xe9, 0x23, 0x71, 0xb,  0x75},
       {0x5e,
        0x44,
        0x54,
        0xa7,
        0x83,
        0x21,
        0xd8,
        0x77,
        0x8c,
        0x7a,
        0x25,
        0xc9,
        0x46,
        0x52,
        0xa,
        0x60}},
      // Buffer with default chunk size
      {{0xaf, 0x38, 0x67, 0x9d, 0x20, 0x56, 0x38, 0x6b, 0xef, 0xdd, 0x62,
        0x6d, 0x60, 0x1b, 0xf9, 0x39, 0xad, 0x71, 0x43, 0xc0, 0x30, 0x14,
        0xed, 0xea, 0x56, 0xff, 0x1f, 0x8a, 0x30, 0x90, 0xb6, 0x8b},
       make_buffer("this is a secret"),
       {0x4,  0x0,  0x0,  0x10, 0x0,  0xf2, 0x38, 0x50, 0x31, 0x6c, 0xfa,
        0xaa, 0x96, 0x8c, 0x1b, 0x25, 0x43, 0xf4, 0x38, 0xe3, 0x61, 0x55,
        0x24, 0x50, 0xe8, 0x3b, 0x3,  0xe9, 0xf6, 0x1,  0xf1, 0x73, 0x5f,
        0x3e, 0x52, 0xb2, 0x8f, 0xc0, 0x1f, 0xd,  0xcd, 0xac, 0x8f, 0x5,
        0x2a, 0xbd, 0x31, 0x32, 0xe,  0x16, 0xdd, 0x20, 0x40, 0x58, 0xa2,
        0xfe, 0xc6, 0xf3, 0x5d, 0xff, 0x25, 0xe8, 0xc9, 0x33, 0xc1, 0x8,
        0xe0, 0xb1, 0xb0, 0xb,  0xe4, 0x86, 0x8c, 0x36, 0xb8, 0x2f, 0xbf},
       {0xf2,
        0x38,
        0x50,
        0x31,
        0x6c,
        0xfa,
        0xaa,
        0x96,
        0x8c,
        0x1b,
        0x25,
        0x43,
        0xf4,
        0x38,
        0xe3,
        0x61}},
      // Buffer with very small chunk size
      {{0xa,  0x7,  0x3d, 0xd0, 0x2c, 0x2d, 0x17, 0xf9, 0x49, 0xd9, 0x35,
        0x8e, 0xf7, 0xfe, 0x7b, 0xd1, 0xf6, 0xb,  0xf1, 0x5c, 0xa4, 0x32,
        0x1e, 0xe4, 0xaa, 0x18, 0xe1, 0x97, 0xbf, 0xf4, 0x5e, 0xfe},
       make_buffer("this is a secret"),
       {0x4,  0x46, 0x0,  0x0,  0x0,  0x40, 0xec, 0x8d, 0x84, 0xad, 0xbe, 0x2b,
        0x27, 0x32, 0xc9, 0xa,  0x1e, 0xc6, 0x8f, 0x2b, 0xdb, 0xcd, 0x7,  0xd0,
        0x3a, 0xc8, 0x74, 0xe1, 0x8,  0x7e, 0x5e, 0xaa, 0xa2, 0x82, 0xd8, 0x8b,
        0xf5, 0xed, 0x22, 0xe6, 0x30, 0xbb, 0xaa, 0x9d, 0x71, 0xe3, 0x9a, 0x4,
        0x22, 0x67, 0x3d, 0xdf, 0xcf, 0x28, 0x48, 0xe2, 0xeb, 0x4b, 0xb4, 0x30,
        0x92, 0x70, 0x23, 0x49, 0x1c, 0xc9, 0x31, 0xcb, 0xda, 0x1a, 0x4,  0x46,
        0x0,  0x0,  0x0,  0x40, 0xec, 0x8d, 0x84, 0xad, 0xbe, 0x2b, 0x27, 0x32,
        0xc9, 0xa,  0x1e, 0xc6, 0x8f, 0x2b, 0xdb, 0x3f, 0x34, 0xf3, 0xd3, 0x23,
        0x90, 0xfc, 0x6,  0x35, 0xda, 0x99, 0x1e, 0x81, 0xdf, 0x88, 0xfc, 0x21,
        0x1e, 0xed, 0x3a, 0x28, 0x2d, 0x51, 0x82, 0x77, 0x7c, 0xf6, 0xbe, 0x54,
        0xd4, 0x92, 0xcd, 0x86, 0xd4, 0x88, 0x55, 0x20, 0x1f, 0xd6, 0x44, 0x47,
        0x30, 0x40, 0x2f, 0xe8, 0xf4, 0x50},
       {0x40,
        0xec,
        0x8d,
        0x84,
        0xad,
        0xbe,
        0x2b,
        0x27,
        0x32,
        0xc9,
        0xa,
        0x1e,
        0xc6,
        0x8f,
        0x2b,
        0xdb}},
  };
};

template <>
struct TestContext<EncryptorV5>
{
  tc::cotask<EncryptionMetadata> encrypt(
      gsl::span<std::uint8_t> encryptedData,
      gsl::span<std::uint8_t const> clearData) const
  {
    return EncryptorV5::encrypt(encryptedData,
                                clearData,
                                Crypto::getRandom<Crypto::SimpleResourceId>(),
                                Crypto::makeSymmetricKey());
  }

  auto encryptedSize(uint64_t clearSize) const
  {
    return EncryptorV5::encryptedSize(clearSize);
  }

  std::vector<TestVector<EncryptorV5>> testVectors{
      {{0x76, 0xd,  0x8e, 0x80, 0x5c, 0xbc, 0xa8, 0xb6, 0xda, 0xea, 0xcf,
        0x66, 0x46, 0xca, 0xd7, 0xeb, 0x4f, 0x3a, 0xbc, 0x69, 0xac, 0x9b,
        0xce, 0x77, 0x35, 0x8e, 0xa8, 0x31, 0xd7, 0x2f, 0x14, 0xdd},
       make_buffer("this is very secret"),
       {0x05, 0xc1, 0x74, 0x53, 0x1e, 0xdd, 0x77, 0x77, 0x87, 0x2c, 0x02,
        0x6e, 0xf2, 0x36, 0xdf, 0x28, 0x7e, 0x70, 0xea, 0xb6, 0xe7, 0x72,
        0x7d, 0xdd, 0x42, 0x5d, 0xa1, 0xab, 0xb3, 0x6e, 0xd1, 0x8b, 0xea,
        0xd7, 0xf5, 0xad, 0x23, 0xc0, 0xbd, 0x8c, 0x1f, 0x68, 0xc7, 0x9e,
        0xf2, 0xe9, 0xd8, 0x9e, 0xf9, 0x7e, 0x93, 0xc4, 0x29, 0x0d, 0x96,
        0x40, 0x2d, 0xbc, 0xf8, 0x0b, 0xb8, 0x4f, 0xfc, 0x48, 0x9b, 0x83,
        0xd1, 0x05, 0x51, 0x40, 0xfc, 0xc2, 0x7f, 0x6e, 0xd9, 0x16},
       {0xc1,
        0x74,
        0x53,
        0x1e,
        0xdd,
        0x77,
        0x77,
        0x87,
        0x2c,
        0x02,
        0x6e,
        0xf2,
        0x36,
        0xdf,
        0x28,
        0x7e}},
  };
};

template <>
struct TestContext<EncryptorV6>
{
  tc::cotask<EncryptionMetadata> encrypt(
      gsl::span<std::uint8_t> encryptedData,
      gsl::span<std::uint8_t const> clearData) const
  {
    return EncryptorV6::encrypt(encryptedData, clearData, paddingStep);
  }

  auto encryptedSize(uint64_t clearSize) const
  {
    auto const res = EncryptorV6::encryptedSize(clearSize, paddingStep);

    if (paddingStep)
    {
      auto const paddedSize = res - overhead;
      CAPTURE(*paddingStep);
      CAPTURE(clearSize);
      CAPTURE(paddedSize);
      CHECK(paddedSize >= clearSize);
      CHECK(paddedSize % *paddingStep == 0);
    }

    return res;
  }

  std::vector<TestVector<EncryptorV6>> testVectors{
      {{0x56, 0x95, 0xa2, 0x36, 0x2b, 0x8b, 0x11, 0x92, 0xf9, 0x56, 0x0b,
        0xcb, 0xf2, 0x07, 0x6a, 0x21, 0x03, 0x2c, 0x82, 0x3b, 0xbe, 0x21,
        0x60, 0x2f, 0x64, 0xf9, 0xc2, 0x9f, 0xe5, 0xe5, 0x6d, 0x7f},
       make_buffer("this is very secret"),
       {0x06, 0x46, 0xfd, 0x4a, 0xab, 0x34, 0x24, 0x3b, 0x97, 0x0e,
        0x13, 0x90, 0x32, 0x88, 0x5c, 0xba, 0xc7, 0x82, 0x4d, 0xeb,
        0xb0, 0x5b, 0xd2, 0x26, 0x6e, 0xc6, 0x7c, 0x05, 0xf0, 0xfc,
        0x77, 0x95, 0x34, 0xa2, 0xfa, 0x7e, 0x6e, 0x36},
       {0xd2,
        0x26,
        0x6e,
        0xc6,
        0x7c,
        0x05,
        0xf0,
        0xfc,
        0x77,
        0x95,
        0x34,
        0xa2,
        0xfa,
        0x7e,
        0x6e,
        0x36}},
  };

  std::optional<uint32_t> paddingStep;

  static constexpr auto overhead = 1 + Crypto::Mac::arraySize + 1;
};

template <>
struct TestContext<EncryptorV7>
{
  tc::cotask<EncryptionMetadata> encrypt(
      gsl::span<std::uint8_t> encryptedData,
      gsl::span<std::uint8_t const> clearData) const
  {
    return EncryptorV7::encrypt(encryptedData,
                                clearData,
                                Crypto::getRandom<Crypto::SimpleResourceId>(),
                                Crypto::makeSymmetricKey(),
                                paddingStep);
  }

  auto encryptedSize(uint64_t clearSize) const
  {
    auto const res = EncryptorV7::encryptedSize(clearSize, paddingStep);

    if (paddingStep)
    {
      auto const paddedSize = res - overhead;
      CAPTURE(*paddingStep);
      CAPTURE(clearSize);
      CAPTURE(paddedSize);
      CHECK(paddedSize >= clearSize);
      CHECK(paddedSize % *paddingStep == 0);
    }

    return res;
  }

  std::vector<TestVector<EncryptorV7>> testVectors{
      {{0x5c, 0x07, 0xdf, 0xd0, 0x6f, 0x79, 0x08, 0x50, 0xef, 0x66, 0xca,
        0x78, 0x93, 0x53, 0xc0, 0x5b, 0x4f, 0xd0, 0xa7, 0xb8, 0x9c, 0xc8,
        0x0d, 0x17, 0xb7, 0x61, 0xd0, 0x4d, 0x98, 0x31, 0x7e, 0x28},
       make_buffer("this is very secret"),
       {0x07, 0x30, 0x5f, 0x9c, 0xdd, 0x65, 0x42, 0xfe, 0x61, 0x23, 0xa6, 0x22,
        0xf8, 0x4f, 0x16, 0xcd, 0x22, 0x4a, 0x73, 0xa8, 0x99, 0x95, 0x4f, 0xe6,
        0x7c, 0x90, 0x12, 0xb2, 0x61, 0xd9, 0xf3, 0x3e, 0xa9, 0xb2, 0x56, 0x65,
        0x5e, 0xde, 0xcf, 0xf2, 0xb4, 0x21, 0x23, 0x45, 0xdc, 0x34, 0xd7, 0xe8,
        0x69, 0x5d, 0x0a, 0x7a, 0xeb, 0xa6, 0x32, 0x3a, 0x33, 0x28, 0x2f, 0x52,
        0xfe, 0x2d, 0x84, 0x51, 0xd8, 0x50, 0x8b, 0xf8, 0x22, 0x78, 0x22, 0x09,
        0x3c, 0xf1, 0x88, 0xc8, 0xf6, 0x75},
       {0x30,
        0x5f,
        0x9c,
        0xdd,
        0x65,
        0x42,
        0xfe,
        0x61,
        0x23,
        0xa6,
        0x22,
        0xf8,
        0x4f,
        0x16,
        0xcd,
        0x22}},
  };

  std::optional<uint32_t> paddingStep;

  static auto constexpr overhead = 1 + SimpleResourceId::arraySize +
                                   Crypto::AeadIv::arraySize +
                                   Crypto::Mac::arraySize + 1;
};

template <>
struct TestContext<EncryptorV8>
{
  tc::cotask<EncryptionMetadata> encrypt(
      gsl::span<std::uint8_t> encryptedData,
      gsl::span<std::uint8_t const> clearData) const
  {
    return EncryptorV8::encrypt(encryptedData,
                                clearData,
                                Crypto::getRandom<Crypto::SimpleResourceId>(),
                                Crypto::makeSymmetricKey(),
                                paddingStep);
  }

  auto encryptedSize(uint64_t clearSize) const
  {
    auto const res = EncryptorV8::encryptedSize(clearSize, paddingStep);

    if (paddingStep)
    {
      auto const chunks = res / Streams::Header::defaultEncryptedChunkSize;
      auto const lastEncryptedChunkSize =
          res % Streams::Header::defaultEncryptedChunkSize;
      auto const lastClearChunkSize =
          Crypto::decryptedSize(lastEncryptedChunkSize -
                                Streams::Header::serializedSize) -
          1;
      auto const paddedSize =
          chunks * (Crypto::decryptedSize(
                        Streams::Header::defaultEncryptedChunkSize -
                        Streams::Header::serializedSize) -
                    1) +
          lastClearChunkSize;

      CAPTURE(chunks);
      CAPTURE(lastEncryptedChunkSize);
      CAPTURE(lastClearChunkSize);
      CAPTURE(*paddingStep);
      CAPTURE(clearSize);
      CAPTURE(paddedSize);
      CHECK(paddedSize >= clearSize);
      CHECK(paddedSize % *paddingStep == 0);
    }

    return res;
  }

  std::vector<TestVector<EncryptorV8>> testVectors{
      // Padded empty buffer
      {{0x07, 0xa9, 0x0b, 0xb5, 0xa1, 0x2a, 0x7c, 0xfd, 0xba, 0x00, 0x27,
        0x65, 0x53, 0xe1, 0x94, 0xee, 0x0d, 0x5a, 0x25, 0xce, 0x73, 0x59,
        0xdf, 0x84, 0xde, 0xa0, 0x3d, 0x06, 0x60, 0xc2, 0x45, 0xa6},
       {},
       {0x08, 0x00, 0x00, 0x10, 0x00, 0xd3, 0x87, 0xbe, 0x8d, 0xa3, 0xbf, 0x4a,
        0xac, 0x71, 0x73, 0x6a, 0xd0, 0xd4, 0xff, 0x7d, 0xe3, 0x2a, 0xde, 0x15,
        0x48, 0xd8, 0xe9, 0x10, 0x07, 0xcb, 0x26, 0x8b, 0x3d, 0x66, 0x42, 0x11,
        0x52, 0x62, 0xd1, 0xfd, 0x8a, 0xd7, 0x3c, 0xce, 0x3c, 0x7b, 0xf5, 0x2d,
        0x42, 0x63, 0x4f, 0x68, 0xe6, 0x51, 0x0f, 0x7f, 0xc4, 0xda, 0x3a, 0x08,
        0x3f, 0xbc, 0x44, 0x6c, 0xab, 0x54, 0x95, 0x63, 0x7e, 0x2b, 0x4e, 0x28},
       {0xd3,
        0x87,
        0xbe,
        0x8d,
        0xa3,
        0xbf,
        0x4a,
        0xac,
        0x71,
        0x73,
        0x6a,
        0xd0,
        0xd4,
        0xff,
        0x7d,
        0xe3}},
      // Unpadded empty buffer
      {{0xd4, 0x5c, 0x8f, 0xe2, 0x93, 0xdf, 0x44, 0x90, 0x51, 0x49, 0xd9,
        0x8c, 0x61, 0x17, 0x4c, 0x54, 0x92, 0x2f, 0x11, 0x82, 0x55, 0x5f,
        0xc2, 0x7b, 0x03, 0x13, 0x1b, 0x21, 0x2b, 0x66, 0x4c, 0xdf},
       {},
       {0x08, 0x00, 0x00, 0x10, 0x00, 0xa7, 0xf2, 0xee, 0x9a, 0x97, 0xa7,
        0x01, 0x8f, 0xa4, 0xf1, 0x13, 0x29, 0x86, 0x79, 0xf3, 0xac, 0x78,
        0x50, 0x54, 0x6c, 0x09, 0xb2, 0x29, 0x0f, 0x3d, 0x46, 0x52, 0x52,
        0xf6, 0xe9, 0x5b, 0x25, 0xa2, 0xc1, 0xdb, 0x54, 0x77, 0xde, 0x79,
        0x5f, 0x1f, 0x8e, 0x47, 0x55, 0x17, 0xeb, 0x3f, 0x44, 0x3a, 0x4a,
        0x45, 0xf9, 0x2a, 0xcd, 0x8a, 0x8f, 0x3b, 0xb3},
       {0xa7,
        0xf2,
        0xee,
        0x9a,
        0x97,
        0xa7,
        0x01,
        0x8f,
        0xa4,
        0xf1,
        0x13,
        0x29,
        0x86,
        0x79,
        0xf3,
        0xac}},
      // Padded buffer with default chunk size
      {{0x7d, 0x0c, 0x78, 0x1d, 0xc1, 0x9d, 0x07, 0xa9, 0x8f, 0xd2, 0x96,
        0x31, 0xb3, 0x2c, 0x94, 0x25, 0x08, 0x8b, 0x7f, 0x80, 0xf3, 0x16,
        0xd5, 0x70, 0xec, 0xf1, 0x03, 0xcc, 0x60, 0xb4, 0x1c, 0xda},
       make_buffer("this is a secret"),
       {0x08, 0x00, 0x00, 0x10, 0x00, 0xc9, 0xfb, 0x70, 0xfb, 0xa0, 0xb7, 0x9d,
        0xf6, 0x50, 0x93, 0x32, 0xd9, 0xe5, 0x93, 0x59, 0xee, 0x0a, 0xc2, 0xf2,
        0x92, 0x27, 0x8d, 0x25, 0xd3, 0xe0, 0x03, 0x22, 0x9f, 0x1e, 0xe8, 0xfc,
        0xa4, 0x05, 0x59, 0xbd, 0x91, 0xe0, 0x85, 0x4a, 0x04, 0x1c, 0x1f, 0x05,
        0x9e, 0x9d, 0x16, 0x76, 0xf0, 0xb7, 0x45, 0xee, 0xac, 0xdb, 0x4c, 0x32,
        0x75, 0x15, 0xd5, 0xca, 0xf8, 0xcf, 0x32, 0x40, 0x94, 0x1d, 0x40, 0x24,
        0x4d, 0x8f, 0xd1, 0x1d, 0x5c, 0x66},
       {0xc9,
        0xfb,
        0x70,
        0xfb,
        0xa0,
        0xb7,
        0x9d,
        0xf6,
        0x50,
        0x93,
        0x32,
        0xd9,
        0xe5,
        0x93,
        0x59,
        0xee}},
      // Padded buffer with small chunk size
      {{0xe0, 0x3a, 0x63, 0xce, 0x7a, 0x70, 0x47, 0x46, 0xd7, 0xb7, 0x45,
        0x6a, 0x7e, 0xa8, 0xd6, 0xf0, 0xd1, 0x13, 0xb9, 0xab, 0x42, 0x53,
        0x54, 0x28, 0x02, 0x8d, 0x86, 0x73, 0x12, 0x3a, 0x54, 0x8d},
       make_buffer("this is a secret"),
       {0x08, 0x46, 0x00, 0x00, 0x00, 0x9c, 0xe1, 0x5d, 0x7e, 0x2f, 0xcc, 0x75,
        0x3f, 0x2f, 0xc9, 0x58, 0xbd, 0xc5, 0x27, 0x1f, 0x84, 0x3f, 0xad, 0x89,
        0x84, 0x9b, 0x45, 0x70, 0x3c, 0x33, 0x6e, 0xd4, 0x0c, 0x6e, 0x2f, 0xf4,
        0x00, 0xa0, 0x89, 0x4d, 0x55, 0xb2, 0x4f, 0x2c, 0x20, 0x76, 0x35, 0x61,
        0x6c, 0xd0, 0x43, 0xc7, 0x44, 0x1a, 0x42, 0xdf, 0x38, 0xe1, 0x47, 0xf2,
        0xb9, 0x95, 0xbd, 0x5d, 0xc3, 0x4f, 0xac, 0xcd, 0x0d, 0x06, 0x08, 0x46,
        0x00, 0x00, 0x00, 0x9c, 0xe1, 0x5d, 0x7e, 0x2f, 0xcc, 0x75, 0x3f, 0x2f,
        0xc9, 0x58, 0xbd, 0xc5, 0x27, 0x1f, 0x84, 0xf5, 0x8d, 0x68, 0x6a, 0x08,
        0x54, 0xaf, 0x82, 0xf3, 0x6f, 0x08, 0x6b, 0x17, 0x81, 0xd4, 0xc4, 0x24,
        0x13, 0x0a, 0x19, 0x10, 0xb2, 0x98, 0x4f, 0xb0, 0x3c, 0x55, 0x55, 0xc2,
        0xb7, 0xb7, 0xc5, 0x4b, 0x37, 0x1f, 0x2e, 0x95, 0x5d, 0xe3, 0x17, 0x71,
        0x1f, 0x0b, 0x0e, 0x55, 0x28, 0x21, 0x02, 0x84, 0x08, 0x46, 0x00, 0x00,
        0x00, 0x9c, 0xe1, 0x5d, 0x7e, 0x2f, 0xcc, 0x75, 0x3f, 0x2f, 0xc9, 0x58,
        0xbd, 0xc5, 0x27, 0x1f, 0x84, 0xdd, 0x45, 0x9f, 0x15, 0xc6, 0xdb, 0x4b,
        0x90, 0x7d, 0x1d, 0x9a, 0xba, 0x2b, 0xa6, 0x46, 0xf5, 0xd4, 0x32, 0x23,
        0xb2, 0xf7, 0xcf, 0x53, 0x89, 0x58, 0x3f, 0x8b, 0xcf, 0x0d, 0x11, 0xb6,
        0x81, 0x98, 0x9c, 0xaf, 0xf7, 0x40, 0xb5, 0xe2, 0x09, 0xd5},
       {0x9c,
        0xe1,
        0x5d,
        0x7e,
        0x2f,
        0xcc,
        0x75,
        0x3f,
        0x2f,
        0xc9,
        0x58,
        0xbd,
        0xc5,
        0x27,
        0x1f,
        0x84}},
      // Unpadded buffer with small chunk size
      {{0x4b, 0x3e, 0x59, 0x05, 0xbf, 0x0a, 0xce, 0x53, 0x1c, 0xdc, 0xbc,
        0xc7, 0x85, 0xb8, 0xb8, 0xb3, 0xd1, 0xe8, 0x77, 0x06, 0x55, 0xab,
        0xf9, 0xad, 0x83, 0xaa, 0x7f, 0x0e, 0x79, 0x29, 0x48, 0x22},
       make_buffer("this is a secret"),
       {0x08, 0x46, 0x00, 0x00, 0x00, 0xa5, 0x04, 0xb7, 0x61, 0x91, 0x6d, 0x02,
        0xc9, 0x79, 0xe3, 0x6d, 0x5b, 0x1f, 0x25, 0x3f, 0xee, 0x2d, 0xd8, 0x8d,
        0xf1, 0x05, 0x0a, 0xfb, 0x0c, 0x1a, 0x8f, 0x6a, 0x90, 0xfc, 0x52, 0xa1,
        0xdd, 0x67, 0xe6, 0xd3, 0xd6, 0xdd, 0xa2, 0xa1, 0x25, 0xc0, 0x64, 0x1a,
        0x02, 0x11, 0xa7, 0x0a, 0x11, 0x6f, 0x12, 0x5a, 0x65, 0xed, 0x6b, 0xea,
        0xeb, 0xfe, 0x2a, 0x17, 0x37, 0x5c, 0x7e, 0x26, 0xd0, 0x7f, 0x08, 0x46,
        0x00, 0x00, 0x00, 0xa5, 0x04, 0xb7, 0x61, 0x91, 0x6d, 0x02, 0xc9, 0x79,
        0xe3, 0x6d, 0x5b, 0x1f, 0x25, 0x3f, 0xee, 0x79, 0x7a, 0xb1, 0xf4, 0x02,
        0xba, 0x88, 0xe3, 0xdd, 0xb7, 0x75, 0xdd, 0xde, 0x92, 0xe9, 0x48, 0x87,
        0x45, 0xb7, 0x0c, 0xb8, 0x38, 0x04, 0xa9, 0xe0, 0xc3, 0x53, 0xd4, 0xcb,
        0x2d, 0xe9, 0xea, 0x34, 0x4c, 0x94, 0x1d, 0x62, 0x0c, 0x65, 0x0c, 0x01,
        0x28, 0x80, 0xd0, 0x36, 0xc8, 0x7d, 0x57, 0xf2, 0x08, 0x46, 0x00, 0x00,
        0x00, 0xa5, 0x04, 0xb7, 0x61, 0x91, 0x6d, 0x02, 0xc9, 0x79, 0xe3, 0x6d,
        0x5b, 0x1f, 0x25, 0x3f, 0xee, 0xe4, 0x6f, 0x97, 0xef, 0x7f, 0x14, 0xb7,
        0x12, 0x8e, 0x4a, 0xac, 0x62, 0x07, 0x7f, 0x9c, 0xe8, 0x4d, 0x34, 0xc3,
        0xd5, 0x0e, 0x4a, 0x52, 0x71, 0xe5, 0xb9, 0x1f, 0x06, 0xb2, 0x7b, 0x00,
        0xd4, 0x35, 0xa1, 0xf7, 0x76, 0xff, 0x48, 0xbd, 0x03, 0xa0},
       {0xa5,
        0x04,
        0xb7,
        0x61,
        0x91,
        0x6d,
        0x02,
        0xc9,
        0x79,
        0xe3,
        0x6d,
        0x5b,
        0x1f,
        0x25,
        0x3f,
        0xee}},
  };

  std::optional<uint32_t> paddingStep;

  // The overhead of this encryptor is not constant, so we put here the overhead
  // when the size of the encrypted buffer is less than 1 chunk
  static auto constexpr overhead =
      Streams::Header::serializedSize + Crypto::Mac::arraySize + 1;
};

template <>
struct TestContext<EncryptorV9>
{
  tc::cotask<EncryptionMetadata> encrypt(
      gsl::span<std::uint8_t> encryptedData,
      gsl::span<std::uint8_t const> clearData) const
  {
    return EncryptorV9::encrypt(encryptedData,
                                clearData,
                                Crypto::getRandom<Crypto::SimpleResourceId>(),
                                Crypto::makeSymmetricKey(),
                                Crypto::getRandom<Crypto::SubkeySeed>());
  }

  auto encryptedSize(uint64_t clearSize) const
  {
    return EncryptorV9::encryptedSize(clearSize);
  }

  std::vector<TestVector<EncryptorV9>> testVectors{
      {{0x18, 0x89, 0xa4, 0xb6, 0x66, 0x0c, 0x14, 0x4e, 0x3a, 0xef, 0x29,
        0x46, 0xcb, 0x6e, 0x10, 0xf3, 0x26, 0xf5, 0xf9, 0x48, 0x4c, 0x99,
        0x95, 0x49, 0x96, 0x7f, 0x48, 0xb0, 0xcc, 0x68, 0xe5, 0xa3},
       make_buffer("this is very secret"),
       {0x09, 0x66, 0xf3, 0x4d, 0x6b, 0x50, 0x98, 0x52, 0x38, 0x9d, 0x3e, 0x55,
        0x53, 0xf2, 0xbe, 0x22, 0x6c, 0x95, 0x06, 0x59, 0x02, 0x9c, 0x53, 0x4f,
        0xec, 0x23, 0x40, 0x60, 0x77, 0x20, 0xee, 0x07, 0x5c, 0x6f, 0x51, 0xcf,
        0x88, 0xe5, 0x00, 0xaa, 0x3a, 0x90, 0x08, 0x8e, 0x4b, 0x22, 0x93, 0xbc,
        0x24, 0x02, 0x62, 0x89, 0x79, 0x51, 0x95, 0x8e, 0x2b, 0x03, 0xcd, 0xcf,
        0xc6, 0x23, 0x90, 0xb4, 0xe3, 0x94, 0xe5, 0x98},
       {0x00, 0x66, 0xf3, 0x4d, 0x6b, 0x50, 0x98, 0x52, 0x38, 0x9d, 0x3e,
        0x55, 0x53, 0xf2, 0xbe, 0x22, 0x6c, 0x95, 0x06, 0x59, 0x02, 0x9c,
        0x53, 0x4f, 0xec, 0x23, 0x40, 0x60, 0x77, 0x20, 0xee, 0x07, 0x5c}},
  };
};

template <>
struct TestContext<EncryptorV10>
{
  tc::cotask<EncryptionMetadata> encrypt(
      gsl::span<std::uint8_t> encryptedData,
      gsl::span<std::uint8_t const> clearData) const
  {
    return EncryptorV10::encrypt(encryptedData,
                                 clearData,
                                 Crypto::getRandom<Crypto::SimpleResourceId>(),
                                 Crypto::makeSymmetricKey(),
                                 Crypto::getRandom<Crypto::SubkeySeed>(),
                                 paddingStep);
  }

  auto encryptedSize(uint64_t clearSize) const
  {
    auto const res = EncryptorV10::encryptedSize(clearSize, paddingStep);

    if (paddingStep)
    {
      auto const paddedSize = res - overhead;
      CAPTURE(*paddingStep);
      CAPTURE(clearSize);
      CAPTURE(paddedSize);
      CHECK(paddedSize >= clearSize);
      CHECK(paddedSize % *paddingStep == 0);
    }

    return res;
  }

  std::vector<TestVector<EncryptorV10>> testVectors{
      {{0x6f, 0xc5, 0xd1, 0xe4, 0x18, 0x3d, 0xfa, 0x71, 0x71, 0x0c, 0x54,
        0xb0, 0x98, 0x12, 0x95, 0x74, 0xae, 0xae, 0x25, 0x13, 0xd3, 0x9f,
        0xc3, 0xdd, 0x18, 0x05, 0x93, 0xb2, 0x5a, 0xa4, 0x77, 0xf7},
       make_buffer("this is very secret"),
       {0x0a, 0x1e, 0x6e, 0x97, 0xbf, 0x8d, 0xeb, 0xbe, 0xe9, 0xc6, 0x60, 0x4d,
        0x7b, 0x5f, 0x91, 0x2a, 0x83, 0x0a, 0xaa, 0xb7, 0xe3, 0x2e, 0x70, 0x06,
        0x85, 0xc9, 0x92, 0xff, 0x0a, 0x03, 0x21, 0x86, 0x78, 0x51, 0x5a, 0x1f,
        0xbf, 0x88, 0x0a, 0x41, 0x32, 0x3f, 0x9e, 0x8f, 0x59, 0x8b, 0x96, 0xae,
        0xb5, 0x7a, 0x50, 0x5b, 0xb7, 0xfd, 0x6c, 0x09, 0xc7, 0x25, 0x88, 0xc1,
        0x6a, 0x4c, 0x32, 0x7f, 0x69, 0x13, 0xd0, 0xfb, 0x11, 0x56},
       {0x00, 0x1e, 0x6e, 0x97, 0xbf, 0x8d, 0xeb, 0xbe, 0xe9, 0xc6, 0x60,
        0x4d, 0x7b, 0x5f, 0x91, 0x2a, 0x83, 0x0a, 0xaa, 0xb7, 0xe3, 0x2e,
        0x70, 0x06, 0x85, 0xc9, 0x92, 0xff, 0x0a, 0x03, 0x21, 0x86, 0x78}},
  };

  std::optional<uint32_t> paddingStep;

  static auto constexpr overhead = 1 + Crypto::SubkeySeed::arraySize +
                                   Crypto::Mac::arraySize +
                                   SimpleResourceId::arraySize + 1;
};

template <>
struct TestContext<EncryptorV11>
{
  tc::cotask<EncryptionMetadata> encrypt(
      gsl::span<std::uint8_t> encryptedData,
      gsl::span<std::uint8_t const> clearData) const
  {
    return EncryptorV11::encrypt(encryptedData,
                                 clearData,
                                 Crypto::getRandom<Crypto::SimpleResourceId>(),
                                 Crypto::makeSymmetricKey(),
                                 paddingStep);
  }

  auto encryptedSize(uint64_t clearSize) const
  {
    auto const res = EncryptorV11::encryptedSize(clearSize, paddingStep);

    if (paddingStep)
    {
      auto const chunksDataLen = res - TransparentSessionHeader::serializedSize;
      auto const chunks =
          chunksDataLen / TransparentSessionHeader::defaultEncryptedChunkSize;
      auto const lastEncryptedChunkSize =
          chunksDataLen % TransparentSessionHeader::defaultEncryptedChunkSize;
      auto const lastClearChunkSize = Crypto::decryptedSize(
          lastEncryptedChunkSize - EncryptorV11::paddingSizeSize);
      auto const paddedSize =
          chunks * Crypto::decryptedSize(
                       TransparentSessionHeader::defaultEncryptedChunkSize -
                       EncryptorV11::paddingSizeSize) +
          lastClearChunkSize;

      CAPTURE(chunks);
      CAPTURE(lastEncryptedChunkSize);
      CAPTURE(lastClearChunkSize);
      CAPTURE(*paddingStep);
      CAPTURE(clearSize);
      CAPTURE(paddedSize);
      CHECK(paddedSize >= clearSize);
      CHECK(paddedSize % *paddingStep == 0);
    }

    return res;
  }

  std::vector<TestVector<EncryptorV11>> testVectors{
      // Padded empty buffer
      {{
           0x41, 0xd5, 0x05, 0x24, 0x56, 0x5e, 0x37, 0x55, 0x3e, 0x5a, 0xe8,
           0xfa, 0x66, 0x77, 0x27, 0xc4, 0xad, 0x44, 0xa0, 0x10, 0x47, 0xeb,
           0xc3, 0x66, 0x6a, 0xb2, 0x4f, 0x3f, 0x1b, 0x91, 0x54, 0x91,
       },
       {},
       {
           0x0b, 0xd2, 0x56, 0x6d, 0xbb, 0xf5, 0x0a, 0xf5, 0xd1, 0x23,
           0x85, 0xa0, 0xed, 0xf6, 0x22, 0x72, 0x6f, 0xf2, 0x71, 0xf5,
           0xa7, 0x0d, 0x8d, 0xe8, 0x1d, 0x16, 0x09, 0x59, 0xbb, 0x54,
           0x60, 0x61, 0x82, 0x00, 0x00, 0x10, 0x00, 0x0c, 0x89, 0xf4,
           0x04, 0x89, 0x72, 0x99, 0xba, 0x9e, 0xa0, 0x42, 0x9f, 0x38,
           0xa9, 0x77, 0x44, 0x84, 0x22, 0x8e, 0xdb, 0x6d, 0x5d, 0xe6,
           0x5f, 0xe5, 0x17, 0xaa, 0xc0, 0x39, 0x1b,
       },
       {
           0x00, 0xd2, 0x56, 0x6d, 0xbb, 0xf5, 0x0a, 0xf5, 0xd1, 0x23, 0x85,
           0xa0, 0xed, 0xf6, 0x22, 0x72, 0x6f, 0xf2, 0x71, 0xf5, 0xa7, 0x0d,
           0x8d, 0xe8, 0x1d, 0x16, 0x09, 0x59, 0xbb, 0x54, 0x60, 0x61, 0x82,
       }},
      // Empty buffer with paddingStep 1
      {{
           0xed, 0x87, 0xab, 0x30, 0x8b, 0xa3, 0x4e, 0x15, 0xeb, 0x36, 0xea,
           0x9f, 0x5a, 0x09, 0xc3, 0x36, 0xb0, 0x8a, 0xb5, 0x4c, 0x1a, 0x12,
           0x9a, 0xe1, 0x8e, 0xd3, 0x38, 0xfd, 0x5a, 0x46, 0x5c, 0xdb,
       },
       {},
       {
           0x0b, 0x0e, 0xeb, 0xfb, 0x00, 0x14, 0xc3, 0x71, 0x57, 0xf2,
           0xa2, 0xe7, 0xe0, 0xa4, 0xe7, 0xdd, 0x7b, 0x5d, 0xc9, 0xcf,
           0xde, 0x01, 0xce, 0xa5, 0xd7, 0x6d, 0xbf, 0xcb, 0x3b, 0x93,
           0x15, 0xff, 0xb8, 0x00, 0x00, 0x10, 0x00, 0xcd, 0xef, 0x33,
           0xc3, 0xab, 0xe8, 0xd8, 0xc8, 0x61, 0x21, 0xfa, 0x40, 0x9c,
           0x45, 0x66, 0x1b, 0xc2, 0x50, 0x43, 0xe9, 0xa6,
       },
       {
           0x00, 0x0e, 0xeb, 0xfb, 0x00, 0x14, 0xc3, 0x71, 0x57, 0xf2, 0xa2,
           0xe7, 0xe0, 0xa4, 0xe7, 0xdd, 0x7b, 0x5d, 0xc9, 0xcf, 0xde, 0x01,
           0xce, 0xa5, 0xd7, 0x6d, 0xbf, 0xcb, 0x3b, 0x93, 0x15, 0xff, 0xb8,
       }},
      // Padded buffer with default chunk size
      {{
           0x2f, 0xcf, 0xcc, 0xa6, 0xe1, 0x3b, 0xdf, 0x0a, 0x33, 0xc6, 0x2a,
           0xfe, 0xb7, 0x1d, 0x98, 0x6c, 0x82, 0x55, 0x46, 0xe3, 0x4e, 0x5f,
           0x5a, 0xb2, 0x2d, 0x64, 0xd4, 0x27, 0xa1, 0xab, 0xc5, 0x4a,
       },
       make_buffer("this is very secret"),
       {
           0x0b, 0x13, 0x1a, 0x19, 0x8d, 0x23, 0xc9, 0x76, 0xd7, 0x4f, 0xaf,
           0x69, 0x92, 0x05, 0x79, 0xeb, 0x79, 0x8d, 0x0b, 0xb1, 0x1c, 0x7d,
           0xc5, 0xf3, 0xc6, 0x74, 0x19, 0xce, 0x4d, 0x3f, 0xce, 0x3a, 0x65,
           0x00, 0x00, 0x10, 0x00, 0xf5, 0x6a, 0xcd, 0xf0, 0xd4, 0x50, 0xa1,
           0xec, 0xa2, 0x61, 0x03, 0x94, 0x1c, 0x06, 0x02, 0xcd, 0x50, 0x7f,
           0xc0, 0x1c, 0xad, 0xae, 0x0d, 0x48, 0xa3, 0xfb, 0x7b, 0xc7, 0x68,
           0x0d, 0x28, 0x30, 0x68, 0x0c, 0x1e, 0x44, 0x56, 0x05, 0x19, 0x94,
       },
       {
           0x00, 0x13, 0x1a, 0x19, 0x8d, 0x23, 0xc9, 0x76, 0xd7, 0x4f, 0xaf,
           0x69, 0x92, 0x05, 0x79, 0xeb, 0x79, 0x8d, 0x0b, 0xb1, 0x1c, 0x7d,
           0xc5, 0xf3, 0xc6, 0x74, 0x19, 0xce, 0x4d, 0x3f, 0xce, 0x3a, 0x65,
       }},
      // Padded buffer with small chunk size (30)
      {{
           0xbe, 0x12, 0xf6, 0x79, 0x65, 0xa3, 0x20, 0xd2, 0xc9, 0xb3, 0xed,
           0x9c, 0xa7, 0xc5, 0xc1, 0x0a, 0xd7, 0x72, 0x39, 0x74, 0x65, 0xff,
           0xfd, 0x7f, 0xbb, 0xd4, 0x22, 0x39, 0xd4, 0x6f, 0x79, 0x5b,
       },
       make_buffer("this is very secret"),
       {
           0x0b, 0xe4, 0x0e, 0xc6, 0x74, 0xfb, 0x61, 0x6e, 0xb5, 0x10, 0x1f,
           0x67, 0x91, 0x95, 0x8b, 0xf6, 0xfa, 0x97, 0x46, 0xcc, 0x6b, 0x6f,
           0xdb, 0xa6, 0x7c, 0x15, 0x61, 0x94, 0x48, 0xb6, 0x2c, 0x04, 0x3a,
           0x1e, 0x00, 0x00, 0x00, 0xb5, 0x90, 0x00, 0x5f, 0xd6, 0x88, 0x07,
           0x2b, 0xc1, 0xf0, 0xbc, 0xe0, 0x02, 0xc5, 0x77, 0xe3, 0x24, 0x84,
           0x4f, 0x50, 0xca, 0x39, 0x8e, 0x66, 0x8c, 0x2b, 0xdb, 0xf7, 0xf4,
           0x54, 0x1f, 0x73, 0x1e, 0x8b, 0x79, 0x78, 0x56, 0x34, 0x36, 0x7b,
           0x0a, 0x47, 0x8e, 0x5d, 0x6f, 0xd6, 0x46, 0x14, 0xbd, 0x17, 0x22,
           0xf2, 0x62, 0x03, 0x74, 0x3c, 0x1e, 0x88, 0x89, 0x07, 0x35, 0x67,
           0x01, 0x7b, 0x2b, 0x2a, 0x18, 0x3f, 0x25, 0x45, 0xea, 0xc2, 0x55,
           0x86, 0xe3, 0x9d, 0x26, 0x34, 0x5a, 0xa4,
       },
       {
           0x00, 0xe4, 0x0e, 0xc6, 0x74, 0xfb, 0x61, 0x6e, 0xb5, 0x10, 0x1f,
           0x67, 0x91, 0x95, 0x8b, 0xf6, 0xfa, 0x97, 0x46, 0xcc, 0x6b, 0x6f,
           0xdb, 0xa6, 0x7c, 0x15, 0x61, 0x94, 0x48, 0xb6, 0x2c, 0x04, 0x3a,
       }},
      // Unpadded buffer with small chunk size (30)
      {{
           0xbc, 0xb7, 0xc3, 0x08, 0x92, 0x01, 0xf9, 0x05, 0x15, 0x52, 0x1c,
           0x05, 0xdc, 0xe2, 0x99, 0x60, 0xa4, 0x61, 0xa3, 0x77, 0x0d, 0x2c,
           0x37, 0xf0, 0xed, 0x3e, 0xb1, 0x23, 0x41, 0x40, 0x76, 0x64,
       },
       make_buffer("this is very secret"),
       {
           0x0b, 0xa3, 0xe6, 0x5d, 0x0e, 0xcc, 0x6f, 0x7e, 0xd4, 0xb2, 0xc7,
           0x7e, 0xa0, 0x87, 0xa6, 0xde, 0x7c, 0xca, 0xbe, 0x4a, 0x9b, 0xa1,
           0x3d, 0xfc, 0x93, 0x62, 0xf8, 0x49, 0x11, 0xb1, 0x09, 0x69, 0xae,
           0x1e, 0x00, 0x00, 0x00, 0x75, 0xbe, 0xe5, 0x08, 0x83, 0x61, 0xcb,
           0xc5, 0xa0, 0xf9, 0xa6, 0x9d, 0x13, 0x52, 0xb0, 0x63, 0x61, 0x20,
           0x85, 0xf7, 0xa8, 0x0e, 0xf8, 0x96, 0xd0, 0x73, 0xa6, 0xf6, 0x8c,
           0x30, 0x3c, 0xed, 0x7b, 0xd5, 0x47, 0xe6, 0xf2, 0xb3, 0x7e, 0xa8,
           0x69, 0x75, 0x7e, 0xe7, 0xa4, 0xde, 0x40, 0xc5, 0x2e, 0xdc, 0xc9,
           0x4d, 0x32, 0x71, 0x32, 0x93, 0x68, 0x71, 0x19,
       },
       {
           0x00, 0xa3, 0xe6, 0x5d, 0x0e, 0xcc, 0x6f, 0x7e, 0xd4, 0xb2, 0xc7,
           0x7e, 0xa0, 0x87, 0xa6, 0xde, 0x7c, 0xca, 0xbe, 0x4a, 0x9b, 0xa1,
           0x3d, 0xfc, 0x93, 0x62, 0xf8, 0x49, 0x11, 0xb1, 0x09, 0x69, 0xae,
       }},
  };

  std::optional<uint32_t> paddingStep;

  // The overhead of this encryptor is not constant, so we put here the overhead
  // when the size of the encrypted buffer is less than 1 chunk
  static auto constexpr overhead =
      Streams::TransparentSessionHeader::serializedSize +
      EncryptorV11::paddingSizeSize + Crypto::Mac::arraySize;
};
}
