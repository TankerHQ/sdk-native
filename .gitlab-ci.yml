include:
  local: /.gitlab/ci/native.yml

variables:
  GIT_DEPTH: 1

.after-script/branch_name:
  after_script:
    - echo $CI_COMMIT_REF_NAME > branch_name.txt

workflow:
  rules:
    - !reference [.rules/assert-version-tags, rules]
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      variables:
        CONAN_REMOTE: "artifactory"
    - if: $CI_COMMIT_REF_NAME =~ /\Arelease\/.+\z/
      variables:
        CONAN_REMOTE: "artifactory"
    - if: '$CI_MERGE_REQUEST_TITLE =~ /.*\[preview].*/'
      variables:
        CONAN_REMOTE: "artifactory-preview"
    - when: always
      variables:
        CONAN_REMOTE: "artifactory-staging"


###############
# build stage #
###############

.rules/build/manual:
  rules:
    - !reference [.rules/mr/manual, rules]
    - !reference [.rules/web/auto, rules]
    - !reference [.rules/nightly, rules]
    - !reference [.rules/push-master, rules]

.rules/build/auto:
  rules:
    - !reference [.rules/mr/auto, rules]
    - !reference [.rules/web/auto, rules]
    - !reference [.rules/nightly, rules]
    - !reference [.rules/push-master-or-feat, rules]

build/linux:
  extends:
    - .build
    - .rules/build/auto
    - .build-artifacts
    - .before-script/bump-files-on-release/bash
    - .after-script/branch_name
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build --remote $CONAN_REMOTE --test --profile linux-x86_64
  tags: !reference [.tags/compilation-linux, tags]

build/linux/shared:
  extends:
    - .build
    - .rules/build/auto
    - .before-script/bump-files-on-release/bash
    - .after-script/branch_name
    - .build-artifacts
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build --remote $CONAN_REMOTE --test --profile linux-x86_64 shared
  tags: !reference [.tags/compilation-linux, tags]

build/linux/shared/no-http-backend:
  extends:
    - .build
    - .rules/build/auto
    - .before-script/bump-files-on-release/bash
    - .after-script/branch_name
    - .build-artifacts
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build --remote $CONAN_REMOTE --test --profile linux-x86_64 shared no-http-backend
  tags: !reference [.tags/compilation-linux, tags]

# build/windows/shared:
#   extends:
#     - .build
#     - .rules/build/manual
#     - .build-artifacts
#     - .before-script/bump-files-on-release/powershell
#     - .after-script/branch_name
#   script:
#     - $env:TANKER_MAX_TEST_EXECUTION_TIMEOUT = '10'
#     - poetry run python run-ci.py --isolate-conan-user-home build --remote $CONAN_REMOTE --test --profile windows-x86_64 shared
#   tags: !reference [.tags/compilation-windows, tags]

build/macos/x86_64:
  extends:
    - .build
    - .rules/build/auto
    - .build-artifacts
    - .before-script/bump-files-on-release/bash
    - .after-script/branch_name
  script:
    - export TANKER_MAX_TEST_EXECUTION_TIMEOUT=10
    - poetry run python run-ci.py --isolate-conan-user-home build --remote $CONAN_REMOTE --test --profile macos-x86_64
  tags: !reference [.tags/macos/x86_64, tags]

build/macos/arm:
  extends:
    - .build
    - .rules/build/auto
    - .build-artifacts
    - .before-script/bump-files-on-release/bash
    - .after-script/branch_name
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build --remote $CONAN_REMOTE --test --profile macos-armv8
  tags: !reference [.tags/macos/arm, tags]

build/macos/x86_64/shared/no-http-backend:
  extends:
    - .build
    - .rules/build/manual
    - .build-artifacts
    - .before-script/bump-files-on-release/bash
    - .after-script/branch_name
  script:
    - export TANKER_MAX_TEST_EXECUTION_TIMEOUT=10
    - poetry run python run-ci.py --isolate-conan-user-home build --remote $CONAN_REMOTE --test --profile macos-x86_64 shared no-http-backend
  tags: !reference [.tags/macos/x86_64, tags]

build/macos/arm/shared/no-http-backend:
  extends:
    - .build
    - .rules/build/manual
    - .build-artifacts
    - .before-script/bump-files-on-release/bash
    - .after-script/branch_name
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build --remote $CONAN_REMOTE --test --profile macos-armv8 shared no-http-backend
  tags: !reference [.tags/macos/arm, tags]

# build/android/shared:
#   extends:
#     - .build
#     - .rules/build/manual
#     - .build-artifacts
#     - .before-script/bump-files-on-release/bash
#     - .after-script/branch_name
#   script:
#     - poetry run python run-ci.py --isolate-conan-user-home build --remote $CONAN_REMOTE --test --profile android-armv7 --profile android-armv8 --profile android-x86 --profile android-x86_64 --profile linux-x86_64 shared
#   tags: !reference [.tags/compilation-linux, tags]
#
# build/android:
#   extends:
#     - .build
#     - .rules/build/manual
#     - .build-artifacts
#     - .before-script/bump-files-on-release/bash
#     - .after-script/branch_name
#   script:
#     - poetry run python run-ci.py --isolate-conan-user-home build --remote $CONAN_REMOTE --test --profile android-armv7 tanker-static --profile android-armv8 tanker-static --profile android-x86 tanker-static --profile android-x86_64 tanker-static
#   tags: !reference [.tags/compilation-linux, tags]

# build/ios:
#   extends:
#     - .build
#     - .rules/build/manual
#     - .build-artifacts
#     - .before-script/bump-files-on-release/bash
#     - .after-script/branch_name
#   script:
#     - poetry run python run-ci.py --isolate-conan-user-home build --remote $CONAN_REMOTE --test --profile ios_simulator-armv8 --profile ios_simulator-x86 --profile ios_simulator-x86_64 --profile ios-armv7 --profile ios-armv7s --profile ios-armv8
#   # build everything on the fast one
#   tags: !reference [.tags/macos/arm, tags]

nightly/coverage:
  extends:
    - .build
    - .rules/nightly
  script:
    # Using linux-x86_64 profile, but CI script will force debug for Tanker only
    - poetry run python run-ci.py --isolate-conan-user-home build --remote $CONAN_REMOTE --test --profile linux-x86_64 --coverage
    - mv build/linux-x86_64/coverage coverage
  artifacts:
    paths:
      - coverage/
    expire_in: 7 days
  tags: !reference [.tags/compilation-linux, tags]

check/test-matcher:
  extends:
    - .build
  rules:
    - !reference [.rules/push-master, rules]
    - !reference [.rules/mr/manual, rules]
    - !reference [.rules/nightly, rules]
  script:
    - poetry run python run-ci.py --isolate-conan-user-home test-matcher --remote $CONAN_REMOTE --profile linux-x86_64
  artifacts:
    expire_in: 7 days
    paths:
      - functional_test_list.json
  tags: !reference [.tags/compilation-linux, tags]

build/bridge-dotenv:
  extends:
    - .build
  inherit:
    default: # Skip docker image
      - "before_script"
  script:
    - poetry run python run-ci.py write-bridge-dotenv --downstream sdk-android
                                                      --downstream sdk-ios
                                                      --downstream sdk-python
                                                      --downstream sdk-react-native
                                                      --downstream sdk-ruby
                                                      --downstream sdk-rust
                                                      --downstream benchmarks
                                                      --downstream compatibility-tests
  artifacts:
    expire_in: 7 days
    reports:
      dotenv: bridge.env
  tags: !reference [.tags/linux, tags]

######################
# bridge-check stage #
######################

.rules/bridge/auto:
  rules:
    - !reference [.rules/mr/auto, rules]
    - !reference [.rules/web/auto, rules]
    - !reference [.rules/push-master, rules]

.rules/bridge/manual:
  rules:
    - !reference [.rules/mr/manual, rules]
    - !reference [.rules/web/auto, rules]

bridge/bench/linux:
  stage: bridge-check
  extends:
    - .variables/bridge-common
  rules:
    - !reference [.rules/mr/manual, rules]
  needs:
    - build/linux
    - build/linux/shared
    - build/bridge-dotenv
  variables:
    UPSTREAM_JOB_NAME: build/linux:build/linux/shared
    UPSTREAM_JOB_TARGET: linux
    UPSTREAM_MERGE_REQUEST_IID: $CI_MERGE_REQUEST_IID
    UPSTREAM_COMMIT_SHA: $CI_COMMIT_SHA
    UPSTREAM_COMMIT_REF_NAME: $CI_COMMIT_REF_NAME
  trigger:
    project: TankerHQ/benchmarks
    branch: $BENCHMARKS_BRIDGE_BRANCH
    strategy: depend

# bridge/compat/linux:
#   stage: bridge-check
#   extends:
#     - .rules/bridge/auto
#     - .variables/bridge-common
#   needs:
#     - build/linux
#     - build/bridge-dotenv
#   variables:
#     UPSTREAM_JOB_NAME: build/linux
#     UPSTREAM_JOB_TARGET: linux
#   trigger:
#     project: TankerHQ/compatibility-tests
#     branch: $COMPATIBILITY_TESTS_BRIDGE_BRANCH
#     strategy: depend

# bridge/ios:
#   stage: bridge-check
#   extends:
#     - .rules/bridge/auto
#     - .variables/bridge-common
#   needs:
#     - build/ios
#     - build/bridge-dotenv
#   variables:
#     UPSTREAM_JOB_TARGET: ios
#     UPSTREAM_JOB_NAME: build/ios
#     UPSTREAM_COMMIT_REF_NAME: $CI_COMMIT_REF_NAME
#   trigger:
#     project: TankerHQ/sdk-ios
#     branch: $SDK_IOS_BRIDGE_BRANCH
#     strategy: depend

# bridge/android:
#   extends:
#     - .bridge-check
#     - .rules/bridge/auto
#     - .variables/bridge-common
#   needs:
#     - build/android/shared
#     - build/bridge-dotenv
#   variables:
#     UPSTREAM_JOB_TARGET: android
#     UPSTREAM_JOB_NAME: build/android/shared
#     UPSTREAM_COMMIT_REF_NAME: $CI_COMMIT_REF_NAME
#   trigger:
#     project: TankerHQ/sdk-android
#     branch: $SDK_ANDROID_BRIDGE_BRANCH
#     strategy: depend

# bridge/rust/linux:
#   extends:
#     - .bridge-check
#     - .rules/bridge/manual
#     - .variables/bridge-common
#   needs:
#     - build/linux
#     - build/bridge-dotenv
#   variables:
#     UPSTREAM_JOB_TARGET: linux
#     UPSTREAM_JOB_NAME: build/linux
#     UPSTREAM_COMMIT_REF_NAME: $CI_COMMIT_REF_NAME
#   trigger:
#     project: TankerHQ/sdk-rust
#     branch: $SDK_RUST_BRIDGE_BRANCH
#     strategy: depend

# bridge/rust/windows:
#   extends:
#     - .bridge-check
#     - .rules/bridge/auto
#     - .variables/bridge-common
#   needs:
#     - build/windows/shared
#     - build/bridge-dotenv
#   variables:
#     UPSTREAM_JOB_TARGET: windows
#     UPSTREAM_JOB_NAME: build/windows/shared
#     UPSTREAM_COMMIT_REF_NAME: $CI_COMMIT_REF_NAME
#   trigger:
#     project: TankerHQ/sdk-rust
#     branch: $SDK_RUST_BRIDGE_BRANCH
#     strategy: depend

# bridge/rust/ios:
#   extends:
#     - .bridge-check
#     - .rules/bridge/auto
#     - .variables/bridge-common
#   needs:
#     - build/ios
#     - build/bridge-dotenv
#   variables:
#     UPSTREAM_JOB_TARGET: ios
#     UPSTREAM_JOB_NAME: build/ios
#     UPSTREAM_COMMIT_REF_NAME: $CI_COMMIT_REF_NAME
#   trigger:
#     project: TankerHQ/sdk-rust
#     branch: $SDK_RUST_BRIDGE_BRANCH
#     strategy: depend

# bridge/rust/macos/x86_64:
#   extends:
#     - .bridge-check
#     - .rules/bridge/manual
#     - .variables/bridge-common
#   needs:
#     - build/macos/x86_64
#     - build/bridge-dotenv
#   variables:
#     UPSTREAM_JOB_TARGET: macos-x86_64
#     UPSTREAM_JOB_NAME: build/macos/x86_64
#     UPSTREAM_COMMIT_REF_NAME: $CI_COMMIT_REF_NAME
#   trigger:
#     project: TankerHQ/sdk-rust
#     branch: $SDK_RUST_BRIDGE_BRANCH
#     strategy: depend

# bridge/rust/macos/arm:
#   extends:
#     - .bridge-check
#     - .rules/bridge/manual
#     - .variables/bridge-common
#   needs:
#     - build/macos/arm
#     - build/bridge-dotenv
#   variables:
#     UPSTREAM_JOB_TARGET: macos-arm
#     UPSTREAM_JOB_NAME: build/macos/arm
#     UPSTREAM_COMMIT_REF_NAME: $CI_COMMIT_REF_NAME
#   trigger:
#     project: TankerHQ/sdk-rust
#     branch: $SDK_RUST_BRIDGE_BRANCH
#     strategy: depend

# bridge/rust/android:
#   extends:
#     - .bridge-check
#     - .rules/bridge/auto
#     - .variables/bridge-common
#   needs:
#     - build/android
#     - build/bridge-dotenv
#   variables:
#     UPSTREAM_JOB_TARGET: android
#     UPSTREAM_JOB_NAME: build/android
#     UPSTREAM_COMMIT_REF_NAME: $CI_COMMIT_REF_NAME
#   trigger:
#     project: TankerHQ/sdk-rust
#     branch: $SDK_RUST_BRIDGE_BRANCH
#     strategy: depend

bridge/python/linux:
  extends:
    - .bridge-check
    - .rules/bridge/manual
    - .variables/bridge-common
  needs:
    - build/linux
    - build/bridge-dotenv
  variables:
    UPSTREAM_JOB_TARGET: linux
    UPSTREAM_JOB_NAME: build/linux
  trigger:
    project: TankerHQ/sdk-python
    branch: $SDK_PYTHON_BRIDGE_BRANCH
    strategy: depend

bridge/python/macos/x86_64:
  extends:
    - .bridge-check
    - .rules/bridge/manual
    - .variables/bridge-common
  needs:
    - build/macos/x86_64
    - build/bridge-dotenv
  variables:
    UPSTREAM_JOB_TARGET: macos-x86_64
    UPSTREAM_JOB_NAME: build/macos/x86_64
  trigger:
    project: TankerHQ/sdk-python
    branch: $SDK_PYTHON_BRIDGE_BRANCH
    strategy: depend

bridge/python/macos/arm:
  extends:
    - .bridge-check
    - .rules/bridge/manual
    - .variables/bridge-common
  needs:
    - build/macos/arm
    - build/bridge-dotenv
  variables:
    UPSTREAM_JOB_TARGET: macos-arm
    UPSTREAM_JOB_NAME: build/macos/arm
    UPSTREAM_JOB_ARCH: arm
  trigger:
    project: TankerHQ/sdk-python
    branch: $SDK_PYTHON_BRIDGE_BRANCH
    strategy: depend

bridge/ruby/linux:
  extends:
    - .bridge-check
    - .rules/bridge/manual
    - .variables/bridge-common
  needs:
    - build/linux/shared/no-http-backend
    - build/bridge-dotenv
  variables:
    UPSTREAM_JOB_TARGET: linux
    UPSTREAM_JOB_NAME: build/linux/shared/no-http-backend
  trigger:
    project: TankerHQ/sdk-ruby
    branch: $SDK_RUBY_BRIDGE_BRANCH
    strategy: depend

bridge/ruby/macos/x86_64:
  extends:
    - .bridge-check
    - .rules/bridge/manual
    - .variables/bridge-common
  needs:
    - build/macos/x86_64/shared/no-http-backend
    - build/bridge-dotenv
  variables:
    UPSTREAM_JOB_TARGET: macos-x86_64
    UPSTREAM_JOB_NAME: build/macos/x86_64/shared/no-http-backend
  trigger:
    project: TankerHQ/sdk-ruby
    branch: $SDK_RUBY_BRIDGE_BRANCH
    strategy: depend

bridge/ruby/macos/arm:
  extends:
    - .bridge-check
    - .rules/bridge/manual
    - .variables/bridge-common
  needs:
    - build/macos/arm/shared/no-http-backend
    - build/bridge-dotenv
  variables:
    UPSTREAM_JOB_TARGET: macos-arm
    UPSTREAM_JOB_NAME: build/macos/arm/shared/no-http-backend
  trigger:
    project: TankerHQ/sdk-ruby
    branch: $SDK_RUBY_BRIDGE_BRANCH
    strategy: depend

###############
# check stage #
###############

.rules/check:
  rules: !reference [.rules/build/auto, rules]

check/e2e:
  extends:
    - .check
    - .rules/check
    - .before-script/bump-files-on-release/bash
  image: registry.gitlab.com/tankerhq/docker/e2e:latest
  needs:
    - build/linux
  script:
    - poetry run python end2end.py --isolate-conan-user-home --use-tanker=upstream --profile linux-x86_64 --remote $CONAN_REMOTE
  tags: !reference [.tags/compilation-linux, tags]

################
# deploy stage #
################

deploy:
  extends:
    - .deploy
    - .rules/deploy/native
  script:
    - poetry run python run-ci.py --isolate-conan-user-home deploy --remote $CONAN_REMOTE
  tags: !reference [.tags/linux, tags]

deploy/tag:
  extends:
    - .deploy
    - .rules/deploy/native/tag
  needs:
    - deploy
  script:
    # This load bearing no-op works around a relatively recent Gitlab bug (only 2+ years old)
    # If there is no script, it will complain that the "release" tag is invalid,
    # or if the release is removed, that "it should contain either a trigger or a needs".
    # This error really means it wants an empty script
    - echo ok
  release:
    description: sdk-native v$SDK_NATIVE_RELEASE_VERSION
    tag_name: v$SDK_NATIVE_RELEASE_VERSION

pages:
  extends:
    - .deploy
    - .rules/nightly
  needs:
    - nightly/coverage
  script:
    - mv coverage/ public/
  artifacts:
    paths:
      - public
    expire_in: 7 days
  tags: !reference [.tags/linux, tags]

#######################
# bridge-deploy stage #
#######################

bridge/bump-native-compat-tests:
  extends:
    - .bridge-deploy
    - .variables/bridge-common
  rules:
    - if: !reference [.if-web-pipeline, if]
      when: manual
  needs:
    - build/bridge-dotenv
    - deploy
  variables:
    SDK_NATIVE_RELEASE_VERSION: $SDK_NATIVE_RELEASE_VERSION
    UPSTREAM_JOB_NAME: deploy
    UPSTREAM_JOB_TARGET: linux
  trigger:
    project: TankerHQ/compatibility-tests
    branch: $COMPATIBILITY_TESTS_BRIDGE_BRANCH
    strategy: depend
  allow_failure: true

# bridge/ios/deploy:
#   extends:
#     - .bridge-deploy
#     - .rules/bridge-release/ios
#     - .variables/bridge-common
#   needs:
#     - bridge/ios
#     - deploy
#     - build/bridge-dotenv
#   variables:
#     UPSTREAM_BRIDGE_STAGE: deploy
#     SDK_IOS_RELEASE_VERSION: $SDK_IOS_RELEASE_VERSION
#     SDK_NATIVE_CONAN_REFERENCE: tanker/$SDK_NATIVE_RELEASE_VERSION@
#   trigger:
#     project: TankerHQ/sdk-ios
#     branch: $SDK_IOS_BRIDGE_BRANCH
#     strategy: depend

# bridge/android/deploy:
#   extends:
#     - .bridge-deploy
#     - .rules/bridge-release/android
#     - .variables/bridge-common
#   needs:
#     - bridge/android
#     - deploy
#     - build/bridge-dotenv
#   variables:
#     UPSTREAM_BRIDGE_STAGE: deploy
#     SDK_ANDROID_RELEASE_VERSION: $SDK_ANDROID_RELEASE_VERSION
#     SDK_NATIVE_CONAN_REFERENCE: tanker/$SDK_NATIVE_RELEASE_VERSION@
#   trigger:
#     project: TankerHQ/sdk-android
#     branch: $SDK_ANDROID_BRIDGE_BRANCH
#     strategy: depend
#
bridge/python/deploy:
  extends:
    - .bridge-deploy
    - .rules/bridge-release/python
    - .variables/bridge-common
  needs:
    - deploy
    - bridge/python/macos/x86_64
    - bridge/python/macos/arm
    - bridge/python/linux
    - build/bridge-dotenv
  variables:
    UPSTREAM_BRIDGE_STAGE: deploy
    SDK_PYTHON_RELEASE_VERSION: $SDK_PYTHON_RELEASE_VERSION
    SDK_NATIVE_CONAN_REFERENCE: tanker/$SDK_NATIVE_RELEASE_VERSION@
  trigger:
    project: TankerHQ/sdk-python
    branch: $SDK_PYTHON_BRIDGE_BRANCH
    strategy: depend

# bridge/react-native/deploy:
#   extends:
#     - .bridge-deploy
#     - .rules/bridge-release/react-native
#     - .variables/bridge-common
#   needs:
#     - deploy
#     - bridge/android/deploy
#     - bridge/ios/deploy
#     - build/bridge-dotenv
#   variables:
#     UPSTREAM_BRIDGE_STAGE: deploy
#     SDK_ANDROID_RELEASE_VERSION: $SDK_ANDROID_RELEASE_VERSION
#     SDK_IOS_RELEASE_VERSION: $SDK_IOS_RELEASE_VERSION
#     SDK_REACT_NATIVE_RELEASE_VERSION: $SDK_REACT_NATIVE_RELEASE_VERSION
#   trigger:
#     project: TankerHQ/sdk-react-native
#     branch: $SDK_REACT_NATIVE_BRIDGE_BRANCH
#     strategy: depend

bridge/ruby/deploy:
  extends:
    - .bridge-deploy
    - .rules/bridge-release/ruby
    - .variables/bridge-common
  needs:
    - deploy
    - bridge/ruby/macos/x86_64
    - bridge/ruby/macos/arm
    - bridge/ruby/linux
    - build/bridge-dotenv
  variables:
    UPSTREAM_BRIDGE_STAGE: deploy
    SDK_RUBY_RELEASE_VERSION: $SDK_RUBY_RELEASE_VERSION
    SDK_NATIVE_CONAN_REFERENCE: tanker/$SDK_NATIVE_RELEASE_VERSION@
  trigger:
    project: TankerHQ/sdk-ruby
    branch: $SDK_RUBY_BRIDGE_BRANCH
    strategy: depend

# bridge/rust/deploy:
#   extends:
#     - .bridge-deploy
#     - .rules/bridge-release/rust
#     - .variables/bridge-common
#   needs:
#     - deploy
#     - bridge/rust/android
#     - bridge/rust/ios
#     - bridge/rust/linux
#     - bridge/rust/macos/arm
#     - bridge/rust/macos/x86_64
#     - bridge/rust/windows
#     - build/bridge-dotenv
#   variables:
#     UPSTREAM_BRIDGE_STAGE: deploy
#     SDK_RUST_RELEASE_VERSION: $SDK_RUST_RELEASE_VERSION
#     SDK_NATIVE_CONAN_REFERENCE: tanker/$SDK_NATIVE_RELEASE_VERSION@
#   trigger:
#     project: TankerHQ/sdk-rust
#     branch: $SDK_RUST_BRIDGE_BRANCH
#     strategy: depend
