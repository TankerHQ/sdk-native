image: registry.gitlab.com/tankerhq/ci/ci-native:latest

before_script:
 - poetry install

stages:
  - build
  - bridge
  - check
  - deploy

.build-always:
  stage: build
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      # trigger the job after a MR is merged on feature branches and master
      # $CI_MERGE_REQUEST_ID == null is needed to avoid duplicate pipelines
    - if: $CI_MERGE_REQUEST_ID == null && $CI_PIPELINE_SOURCE == "push" && ($CI_COMMIT_REF_NAME == "master" || $CI_COMMIT_REF_NAME =~ /\Afeat\/.+\z/)
    - if: $CI_PIPELINE_SOURCE == "schedule"

.build-manual:
  stage: build
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
      allow_failure: true

.deploy:
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG
      when: manual

build/linux:
  extends: .build-always
  artifacts:
    expire_in: 1 day
    paths:
      - package/
  tags: [linux]
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build-and-test --profile gcc8-release

build/android:
  extends: .build-manual
  artifacts:
    paths:
      - package/
  tags: [linux]
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build-and-test --profile android-armv7-release --profile android-armv8-release --profile android-x86-release --profile android-x86_64-release --profile gcc8-release-shared

build/linux/shared:
  extends: .build-manual
  artifacts:
    paths:
      - package/
  tags: [linux]
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build-and-test --profile gcc8-release-shared

build/macos:
  extends: .build-always
  artifacts:
    paths:
      - package
  tags: [macos]
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build-and-test --profile macos-release

build/macos/shared:
  extends: .build-manual
  artifacts:
    paths:
      - package/
  tags: [macos]
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build-and-test --profile macos-release-shared

build/ios:
  extends: .build-manual
  tags: [macos]
  artifacts:
    paths:
      - package
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build-and-test --profile ios-x86-release --profile ios-x86_64-release

build/windows/visual:
  extends: .build-always
  tags: [windows]
  artifacts:
    paths:
      - package
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build-and-test --profile vs2019-release

# TODO put this one back once mingw-toolchain is up and running
# build/windows/mingw:
#   extends: .build-manual
#   tags: [windows]
#   script:
#     - poetry run python run-ci.py --isolate-conan-user-home build-and-test --profile mingw32-release

deploy/linux:
  extends: .deploy
  tags: [linux]
  script:
    - poetry run python run-ci.py --isolate-conan-user-home deploy

deploy/macos:
  extends: .deploy
  tags: [macos]
  script:
    - poetry run python run-ci.py --isolate-conan-user-home deploy

deploy/windows:
  extends: .deploy
  tags: [windows]
  script:
    - poetry run python run-ci.py --isolate-conan-user-home deploy

nightly/coverage:
  stage: build
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    # Using gcc8-release profile, but CI script will force debug for Tanker only
    - poetry run python run-ci.py --isolate-conan-user-home build-and-test --profile gcc8-release --coverage
    - mv build/gcc8-release/coverage coverage
  tags:
    - linux
  artifacts:
    paths:
      - coverage/
    expire_in: 7 days

bridge/ios:
  needs: ["build/ios"]
  stage: bridge
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  variables:
    UPSTREAM_RUNNER_TAG: macos
    UPSTREAM_PROJECT_ID: $CI_PROJECT_ID
    UPSTREAM_PIPELINE_ID: $CI_PIPELINE_ID
    UPSTREAM_JOB_NAME: build/ios
    UPSTREAM_BRANCH_NAME: $CI_COMMIT_REF_NAME
  trigger:
    project: TankerHQ/sdk-ios
    strategy: depend

bridge/android:
  needs: ["build/android"]
  stage: bridge
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  variables:
    UPSTREAM_RUNNER_TAG: linux
    UPSTREAM_PROJECT_ID: $CI_PROJECT_ID
    UPSTREAM_PIPELINE_ID: $CI_PIPELINE_ID
    UPSTREAM_JOB_NAME: build/android
    UPSTREAM_BRANCH_NAME: $CI_COMMIT_REF_NAME
  trigger:
    project: TankerHQ/sdk-android
    strategy: depend

bridge/ruby/linux:
  needs: ["build/linux/shared"]
  stage: bridge
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  variables:
    UPSTREAM_RUNNER_TAG: linux
    UPSTREAM_PROJECT_ID: $CI_PROJECT_ID
    UPSTREAM_PIPELINE_ID: $CI_PIPELINE_ID
    UPSTREAM_JOB_NAME: build/linux/shared
    UPSTREAM_BRANCH_NAME: $CI_COMMIT_REF_NAME
  trigger:
    project: TankerHQ/sdk-ruby
    strategy: depend

bridge/ruby/macos:
  needs: ["build/macos/shared"]
  stage: bridge
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  variables:
    UPSTREAM_RUNNER_TAG: macos
    UPSTREAM_PROJECT_ID: $CI_PROJECT_ID
    UPSTREAM_PIPELINE_ID: $CI_PIPELINE_ID
    UPSTREAM_JOB_NAME: build/macos/shared
    UPSTREAM_BRANCH_NAME: $CI_COMMIT_REF_NAME
  trigger:
    project: TankerHQ/sdk-ruby
    strategy: depend

bridge/python/macos:
  needs: ["build/macos"]
  stage: bridge
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  variables:
    UPSTREAM_RUNNER_TAG: macos
    UPSTREAM_PROJECT_ID: $CI_PROJECT_ID
    UPSTREAM_PIPELINE_ID: $CI_PIPELINE_ID
    UPSTREAM_JOB_NAME: build/macos
    UPSTREAM_BRANCH_NAME: $CI_COMMIT_REF_NAME
  trigger:
    project: TankerHQ/sdk-python
    strategy: depend

bridge/python/linux:
  needs: ["build/linux"]
  stage: bridge
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  variables:
    UPSTREAM_RUNNER_TAG: linux
    UPSTREAM_PROJECT_ID: $CI_PROJECT_ID
    UPSTREAM_PIPELINE_ID: $CI_PIPELINE_ID
    UPSTREAM_JOB_NAME: build/linux
    UPSTREAM_BRANCH_NAME: $CI_COMMIT_REF_NAME
  trigger:
    project: TankerHQ/sdk-python
    strategy: depend

bridge/python/windows:
  needs: ["build/windows/visual"]
  stage: bridge
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  variables:
    UPSTREAM_RUNNER_TAG: windows
    UPSTREAM_PROJECT_ID: $CI_PROJECT_ID
    UPSTREAM_PIPELINE_ID: $CI_PIPELINE_ID
    UPSTREAM_JOB_NAME: build/windows/visual
    UPSTREAM_BRANCH_NAME: $CI_COMMIT_REF_NAME
  trigger:
    project: TankerHQ/sdk-python
    strategy: depend

pages:
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  dependencies:
    - nightly/coverage
  script:
    - mv coverage/ public/
  artifacts:
    paths:
      - public
    expire_in: 7 days
  tags:
    - linux

mirror:
  tags:
    - linux
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /\Av[0-9.]+\z/
    - if: $CI_COMMIT_REF_NAME =~ /\Afeat\/.+\z/
    - if: $CI_COMMIT_REF_NAME == "master"
  script:
    - poetry run python run-ci.py mirror

check/compat:
  stage: check
  needs: ["build/linux"]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - poetry run python compat/run-compat.py --isolate-conan-user-home --profile gcc8-release
  tags:
    - linux

check/e2e:
  image: registry.gitlab.com/tankerhq/ci/ci-main:latest
  stage: check
  needs: ["build/linux"]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - poetry run python end2end.py --isolate-conan-user-home --profile gcc8-release
  tags:
    - linux
