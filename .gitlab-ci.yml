include:
  project: TankerHQ/gitlab-ci-files
  file: /native.yml
  ref: 2021-12-16-236

.after-script/branch_name:
  after_script:
    - echo $CI_COMMIT_REF_NAME > branch_name.txt

workflow:
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      variables:
        CONAN_REMOTE: "artifactory"
    - if: '$CI_MERGE_REQUEST_TITLE =~ /.*\[preview].*/'
      variables:
        CONAN_REMOTE: "artifactory-preview"
    - when: always
      variables:
        CONAN_REMOTE: "artifactory-staging"


###############
# build stage #
###############

.rules/build/manual:
  rules:
    - !reference [.rules/mr/manual, rules]
    - !reference [.rules/web/auto, rules]
    - !reference [.rules/nightly, rules]
    - !reference [.rules/push-master, rules]

.rules/build/auto:
  rules:
    - !reference [.rules/mr/auto, rules]
    - !reference [.rules/web/auto, rules]
    - !reference [.rules/nightly, rules]
    - !reference [.rules/push-master-or-feat, rules]

build/linux:
  extends:
    - .build
    - .rules/build/auto
    - .build-artifacts
    - .before-script/bump-files-on-release/bash
    - .after-script/branch_name
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build --remote $CONAN_REMOTE --test --profile linux-x86_64
  tags: !reference [.tags/compilation-linux, tags]

build/linux/shared:
  extends:
    - .build
    - .rules/build/auto
    - .before-script/bump-files-on-release/bash
    - .after-script/branch_name
    - .build-artifacts
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build --remote $CONAN_REMOTE --test --profile linux-x86_64 shared
  tags: !reference [.tags/compilation-linux, tags]

build/linux/shared/no-http-backend:
  extends:
    - .build
    - .rules/build/auto
    - .before-script/bump-files-on-release/bash
    - .after-script/branch_name
    - .build-artifacts
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build --remote $CONAN_REMOTE --test --profile linux-x86_64 shared no-fetchpp
  tags: !reference [.tags/compilation-linux, tags]

build/windows:
  extends:
    - .build
    - .rules/build/auto
    - .build-artifacts
    - .before-script/bump-files-on-release/powershell
    - .after-script/branch_name
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build --remote $CONAN_REMOTE --test --profile windows-x86_64
  tags: !reference [.tags/compilation-windows, tags]

build/windows/shared:
  extends:
    - .build
    - .rules/build/manual
    - .build-artifacts
    - .before-script/bump-files-on-release/powershell
    - .after-script/branch_name
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build --remote $CONAN_REMOTE --test --profile windows-x86_64 shared
  tags: !reference [.tags/compilation-windows, tags]

build/macos/x86_64:
  extends:
    - .build
    - .rules/build/auto
    - .build-artifacts
    - .before-script/bump-files-on-release/bash
    - .after-script/branch_name
  script:
    - export TANKER_MAX_TEST_EXECUTION_TIMEOUT=10
    - poetry run python run-ci.py --isolate-conan-user-home build --remote $CONAN_REMOTE --test --profile macos-x86_64
  tags: !reference [.tags/macos/x86_64, tags]

build/macos/arm:
  extends:
    - .build
    - .rules/build/auto
    - .build-artifacts
    - .before-script/bump-files-on-release/bash
    - .after-script/branch_name
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build --remote $CONAN_REMOTE --test --profile macos-armv8
  tags: !reference [.tags/macos/arm, tags]

build/macos/x86_64/shared/no-http-backend:
  extends:
    - .build
    - .rules/build/manual
    - .build-artifacts
    - .before-script/bump-files-on-release/bash
    - .after-script/branch_name
  script:
    - export TANKER_MAX_TEST_EXECUTION_TIMEOUT=10
    - poetry run python run-ci.py --isolate-conan-user-home build --remote $CONAN_REMOTE --test --profile macos-x86_64 shared no-fetchpp
  tags: !reference [.tags/macos/x86_64, tags]

build/macos/arm/shared/no-http-backend:
  extends:
    - .build
    - .rules/build/manual
    - .build-artifacts
    - .before-script/bump-files-on-release/bash
    - .after-script/branch_name
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build --remote $CONAN_REMOTE --test --profile macos-armv8 shared no-fetchpp
  tags: !reference [.tags/macos/arm, tags]

build/android/shared:
  extends:
    - .build
    - .rules/build/manual
    - .build-artifacts
    - .before-script/bump-files-on-release/bash
    - .after-script/branch_name
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build --remote $CONAN_REMOTE --test --profile android-armv7 --profile android-armv8 --profile android-x86 --profile android-x86_64 --profile linux-x86_64 shared
  tags: !reference [.tags/compilation-linux, tags]

build/android/static/http-backend:
  extends:
    - .build
    - .rules/build/manual
    - .build-artifacts
    - .before-script/bump-files-on-release/bash
    - .after-script/branch_name
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build --remote $CONAN_REMOTE --test --profile android-armv7 tanker-static http-backend --profile android-armv8 tanker-static http-backend --profile android-x86 tanker-static http-backend --profile android-x86_64 tanker-static http-backend
  tags: !reference [.tags/compilation-linux, tags]

build/ios:
  extends:
    - .build
    - .rules/build/manual
    - .build-artifacts
    - .before-script/bump-files-on-release/bash
    - .after-script/branch_name
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build --remote $CONAN_REMOTE --test --profile ios_simulator-armv8 --profile ios_simulator-x86 --profile ios_simulator-x86_64 --profile ios-armv7 --profile ios-armv7s --profile ios-armv8
  # build everything on the fast one
  tags: !reference [.tags/macos/arm, tags]

build/ios/http-backend:
  extends:
    - .build
    - .rules/build/manual
    - .build-artifacts
    - .before-script/bump-files-on-release/bash
    - .after-script/branch_name
  script:
    - poetry run python run-ci.py --isolate-conan-user-home build --remote $CONAN_REMOTE --test --profile ios_simulator-armv8 http-backend --profile ios_simulator-x86 http-backend --profile ios_simulator-x86_64 http-backend --profile ios-armv7 http-backend --profile ios-armv7s http-backend --profile ios-armv8 http-backend
  # build everything on the fast one
  tags: !reference [.tags/macos/arm, tags]

nightly/coverage:
  extends:
    - .build
    - .rules/nightly
  script:
    # Using linux-x86_64 profile, but CI script will force debug for Tanker only
    - poetry run python run-ci.py --isolate-conan-user-home build --remote $CONAN_REMOTE --test --profile linux-x86_64 --coverage
    - mv build/linux-x86_64/coverage coverage
  artifacts:
    paths:
      - coverage/
    expire_in: 7 days
  tags: !reference [.tags/compilation-linux, tags]

######################
# bridge-check stage #
######################

.rules/bridge/auto:
  rules:
    - !reference [.rules/mr/auto, rules]
    - !reference [.rules/web/auto, rules]
    - !reference [.rules/push-master, rules]

.rules/bridge/manual:
  rules:
    - !reference [.rules/mr/manual, rules]
    - !reference [.rules/web/auto, rules]

bridge/bench/linux:
  stage: bridge-check
  extends:
    - .variables/bridge-common
  rules:
    - !reference [.rules/mr/manual, rules]
  needs:
    - build/linux
    - build/linux/shared
  variables:
    UPSTREAM_JOB_NAME: build/linux:build/linux/shared
    UPSTREAM_JOB_TARGET: linux
    UPSTREAM_MERGE_REQUEST_IID: $CI_MERGE_REQUEST_IID
    UPSTREAM_COMMIT_SHA: $CI_COMMIT_SHA
    UPSTREAM_COMMIT_REF_NAME: $CI_COMMIT_REF_NAME
  trigger:
    project: TankerHQ/benchmarks
    strategy: depend

bridge/compat/linux:
  stage: bridge-check
  extends:
    - .rules/bridge/auto
    - .variables/bridge-common
  needs:
    - build/linux
  variables:
    UPSTREAM_JOB_NAME: build/linux
    UPSTREAM_JOB_TARGET: linux
  trigger:
    project: TankerHQ/compatibility-tests
    strategy: depend

bridge/ios:
  stage: bridge-check
  extends:
    - .rules/bridge/auto
    - .variables/bridge-common
  needs:
    - build/ios
  variables:
    UPSTREAM_JOB_NAME: build/ios
  trigger:
    project: TankerHQ/sdk-ios
    strategy: depend

bridge/android:
  extends:
    - .bridge-check
    - .rules/bridge/auto
    - .variables/bridge-common
  needs:
    - build/android/shared
  variables:
    UPSTREAM_JOB_NAME: build/android/shared
  trigger:
    project: TankerHQ/sdk-android
    strategy: depend

bridge/rust/linux:
  extends:
    - .bridge-check
    - .rules/bridge/manual
    - .variables/bridge-common
  needs:
    - build/linux
  variables:
    UPSTREAM_JOB_TARGET: linux
    UPSTREAM_JOB_NAME: build/linux
  trigger:
    project: TankerHQ/sdk-rust
    strategy: depend

bridge/rust/windows:
  extends:
    - .bridge-check
    - .rules/bridge/auto
    - .variables/bridge-common
  needs:
    - build/windows/shared
  variables:
    UPSTREAM_JOB_TARGET: windows
    UPSTREAM_JOB_NAME: build/windows/shared
  trigger:
    project: TankerHQ/sdk-rust
    strategy: depend

bridge/rust/ios:
  extends:
    - .bridge-check
    - .rules/bridge/auto
    - .variables/bridge-common
  needs:
    - build/ios/http-backend
  variables:
    UPSTREAM_JOB_TARGET: ios
    UPSTREAM_JOB_NAME: build/ios/http-backend
  trigger:
    project: TankerHQ/sdk-rust
    strategy: depend

bridge/rust/macos/x86_64:
  extends:
    - .bridge-check
    - .rules/bridge/manual
    - .variables/bridge-common
  needs:
    - build/macos/x86_64
  variables:
    UPSTREAM_JOB_TARGET: macos-x86_64
    UPSTREAM_JOB_NAME: build/macos/x86_64
  trigger:
    project: TankerHQ/sdk-rust
    strategy: depend

bridge/rust/macos/arm:
  extends:
    - .bridge-check
    - .rules/bridge/manual
    - .variables/bridge-common
  needs:
    - build/macos/arm
  variables:
    UPSTREAM_JOB_TARGET: macos-arm
    UPSTREAM_JOB_NAME: build/macos/arm
  trigger:
    project: TankerHQ/sdk-rust
    strategy: depend

bridge/rust/android:
  extends:
    - .bridge-check
    - .rules/bridge/auto
    - .variables/bridge-common
  needs:
    - build/android/static/http-backend
  variables:
    UPSTREAM_JOB_TARGET: android
    UPSTREAM_JOB_NAME: build/android/static/http-backend
  trigger:
    project: TankerHQ/sdk-rust
    strategy: depend

bridge/python/linux:
  extends:
    - .bridge-check
    - .rules/bridge/manual
    - .variables/bridge-common
  needs:
    - build/linux
  variables:
    UPSTREAM_JOB_TARGET: linux
    UPSTREAM_JOB_NAME: build/linux
  trigger:
    project: TankerHQ/sdk-python
    strategy: depend

bridge/python/macos/x86_64:
  extends:
    - .bridge-check
    - .rules/bridge/manual
    - .variables/bridge-common
  needs:
    - build/macos/x86_64
  variables:
    UPSTREAM_JOB_TARGET: macos-x86_64
    UPSTREAM_JOB_NAME: build/macos/x86_64
  trigger:
    project: TankerHQ/sdk-python
    strategy: depend

bridge/python/macos/arm:
  extends:
    - .bridge-check
    - .rules/bridge/manual
    - .variables/bridge-common
  needs:
    - build/macos/arm
  variables:
    UPSTREAM_JOB_TARGET: macos-arm
    UPSTREAM_JOB_NAME: build/macos/arm
    UPSTREAM_JOB_ARCH: arm
  trigger:
    project: TankerHQ/sdk-python
    strategy: depend

bridge/python/windows:
  extends:
    - .bridge-check
    - .rules/bridge/manual
    - .variables/bridge-common
  needs:
    - build/windows
  variables:
    UPSTREAM_JOB_TARGET: windows
    UPSTREAM_JOB_NAME: build/windows
  trigger:
    project: TankerHQ/sdk-python
    strategy: depend

bridge/ruby/linux:
  extends:
    - .bridge-check
    - .rules/bridge/manual
    - .variables/bridge-common
  needs:
    - build/linux/shared/no-http-backend
  variables:
    UPSTREAM_JOB_TARGET: linux
    UPSTREAM_JOB_NAME: build/linux/shared/no-http-backend
  trigger:
    project: TankerHQ/sdk-ruby
    strategy: depend

bridge/ruby/macos/x86_64:
  extends:
    - .bridge-check
    - .rules/bridge/manual
    - .variables/bridge-common
  needs:
    - build/macos/x86_64/shared/no-http-backend
  variables:
    UPSTREAM_JOB_TARGET: macos-x86_64
    UPSTREAM_JOB_NAME: build/macos/x86_64/shared/no-http-backend
  trigger:
    project: TankerHQ/sdk-ruby
    strategy: depend

bridge/ruby/macos/arm:
  extends:
    - .bridge-check
    - .rules/bridge/manual
    - .variables/bridge-common
  needs:
    - build/macos/arm/shared/no-http-backend
  variables:
    UPSTREAM_JOB_TARGET: macos-arm
    UPSTREAM_JOB_NAME: build/macos/arm/shared/no-http-backend
  trigger:
    project: TankerHQ/sdk-ruby
    strategy: depend

###############
# check stage #
###############

.rules/check:
  rules: !reference [.rules/build/auto, rules]

check/e2e:
  extends:
    - .check
    - .rules/check
    - .before-script/bump-files-on-release/bash
  image: registry.gitlab.com/tankerhq/docker/e2e:latest
  needs:
    - build/linux
  script:
    - poetry run python end2end.py --isolate-conan-user-home --use-tanker=upstream --profile linux-x86_64 --remote $CONAN_REMOTE
  tags: !reference [.tags/compilation-linux, tags]

################
# deploy stage #
################

deploy:
  extends:
    - .deploy
    - .rules/deploy/native
  release:
    description: sdk-native v$SDK_NATIVE_RELEASE_VERSION
    tag_name: v$SDK_NATIVE_RELEASE_VERSION
  script:
    - poetry run python run-ci.py --isolate-conan-user-home deploy --remote $CONAN_REMOTE
  tags: !reference [.tags/linux, tags]

pages:
  extends:
    - .deploy
    - .rules/nightly
  needs:
    - nightly/coverage
  script:
    - mv coverage/ public/
  artifacts:
    paths:
      - public
    expire_in: 7 days
  tags: !reference [.tags/linux, tags]

#######################
# bridge-deploy stage #
#######################

bridge/bump-native-compat-tests:
  extends:
    - .bridge-deploy
    - .variables/bridge-common
  rules:
    - if: !reference [.if-web-pipeline, if]
      when: manual
  variables:
    SDK_NATIVE_RELEASE_VERSION: $SDK_NATIVE_RELEASE_VERSION
    UPSTREAM_JOB_NAME: deploy
    UPSTREAM_JOB_TARGET: linux
  trigger:
    project: TankerHQ/compatibility-tests
    strategy: depend
  allow_failure: true

bridge/ios/deploy:
  extends:
    - .bridge-deploy
    - .rules/bridge-release/ios
    - .variables/bridge-common
  needs:
    - bridge/ios
    - deploy
  variables:
    UPSTREAM_BRIDGE_STAGE: deploy
    SDK_IOS_RELEASE_VERSION: $SDK_IOS_RELEASE_VERSION
    SDK_NATIVE_LATEST_CONAN_REFERENCE: tanker/$SDK_NATIVE_RELEASE_VERSION@
  trigger:
    project: TankerHQ/sdk-ios
    strategy: depend

bridge/android/deploy:
  extends:
    - .bridge-deploy
    - .rules/bridge-release/android
    - .variables/bridge-common
  needs:
    - bridge/android
    - deploy
  variables:
    UPSTREAM_BRIDGE_STAGE: deploy
    SDK_ANDROID_RELEASE_VERSION: $SDK_ANDROID_RELEASE_VERSION
    SDK_NATIVE_LATEST_CONAN_REFERENCE: tanker/$SDK_NATIVE_RELEASE_VERSION@
  trigger:
    project: TankerHQ/sdk-android
    strategy: depend

bridge/python/deploy:
  extends:
    - .bridge-deploy
    - .rules/bridge-release/python
    - .variables/bridge-common
  needs:
    - deploy
    - bridge/python/windows
    - bridge/python/macos/x86_64
    - bridge/python/macos/arm
    - bridge/python/linux
  variables:
    UPSTREAM_BRIDGE_STAGE: deploy
    SDK_PYTHON_RELEASE_VERSION: $SDK_PYTHON_RELEASE_VERSION
    SDK_NATIVE_LATEST_CONAN_REFERENCE: tanker/$SDK_NATIVE_RELEASE_VERSION@
  trigger:
    project: TankerHQ/sdk-python
    strategy: depend

bridge/ruby/deploy:
  extends:
    - .bridge-deploy
    - .rules/bridge-release/ruby
    - .variables/bridge-common
  needs:
    - deploy
    - bridge/ruby/macos/x86_64
    - bridge/ruby/macos/arm
    - bridge/ruby/linux
  variables:
    UPSTREAM_BRIDGE_STAGE: deploy
    SDK_RUBY_RELEASE_VERSION: $SDK_RUBY_RELEASE_VERSION
    SDK_NATIVE_LATEST_CONAN_REFERENCE: tanker/$SDK_NATIVE_RELEASE_VERSION@
  trigger:
    project: TankerHQ/sdk-ruby
    strategy: depend

bridge/rust/deploy:
  extends:
    - .bridge-deploy
    - .rules/bridge-release/rust
    - .variables/bridge-common
  needs:
    - deploy
    - bridge/rust/ios
    - bridge/rust/android
    - bridge/rust/macos/arm
    - bridge/rust/macos/x86_64
    - bridge/rust/linux
  variables:
    UPSTREAM_BRIDGE_STAGE: deploy
    SDK_RUST_RELEASE_VERSION: $SDK_RUST_RELEASE_VERSION
    SDK_NATIVE_LATEST_CONAN_REFERENCE: tanker/$SDK_NATIVE_RELEASE_VERSION@
  trigger:
    project: TankerHQ/sdk-rust
    strategy: depend

#############################
# react-native-deploy stage #
#############################

bridge/react-native/deploy:
  extends:
    - .react-native-deploy
    - .rules/bridge-release/react-native
    - .variables/bridge-common
  needs:
    - bridge/android/deploy
    - bridge/ios/deploy
  variables:
    UPSTREAM_BRIDGE_STAGE: deploy
    SDK_ANDROID_RELEASE_VERSION: $SDK_ANDROID_RELEASE_VERSION
    SDK_IOS_RELEASE_VERSION: $SDK_IOS_RELEASE_VERSION
    SDK_REACT_NATIVE_RELEASE_VERSION: $SDK_REACT_NATIVE_RELEASE_VERSION
  trigger:
    project: TankerHQ/sdk-react-native
    strategy: depend
